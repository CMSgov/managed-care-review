service: ui

frameworkVersion: '^3.19.0'

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1

plugins:
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper

custom:
  region: ${aws:region}
  serverlessTerminationProtection:
    stages:
      - dev
      - val
      - prod
      - main

resources:
  Conditions:
    CreateDnsRecord:
      Fn::And:
        - Fn::Not:
            - Fn::Equals:
                - ''
                - ${env:ROUTE_53_HOSTED_ZONE_ID, ""}
        - Fn::Not:
            - Fn::Equals:
                - ''
                - ${env:ROUTE_53_DOMAIN_NAME, ""}
    CreateCustomCloudFrontDomain:
      Fn::And:
        - Fn::Not:
            - Fn::Equals:
                - ''
                - ${ssm:/configuration/cloudfront/certificate_arn, ""}
        - Fn::Not:
            - Fn::Equals:
                - ''
                - ${ssm:/configuration/cloudfront/domain_name, ""}
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 's3:GetObject'
              Resource: !Sub arn:aws:s3:::${S3Bucket}/*
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            - Effect: Deny
              Action: 's3:*'
              Principal: '*'
              Condition:
                Bool:
                  'aws:SecureTransport': false
              Resource:
                - !Sub ${S3Bucket.Arn}
                - !Sub ${S3Bucket.Arn}/*
              Sid: DenyUnencryptedConnections
        Bucket: !Ref S3Bucket
    CloudFrontWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        DefaultAction:
          Block: {}
        Rules:
          - Action:
              Allow: {}
            Name: ${sls:stage}-allow-usa-plus-territories
            Priority: 0
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU # Guam
                  - PR # Puerto Rico
                  - US # USA
                  - UM # US Minor Outlying Islands
                  - VI # US Virgin Islands
                  - MP # Northern Mariana Islands
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: WafWebAcl
        Scope: CLOUDFRONT
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          SampledRequestsEnabled: true
          MetricName: ${sls:stage}-webacl
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI to prevent direct public access to the bucket

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: CloudFront Distro for the static website hosted in S3
          Aliases:
            Fn::If:
              - CreateCustomCloudFrontDomain
              - - ${ssm:/configuration/cloudfront/domain_name, ""}
              - !Ref AWS::NoValue
          Origins:
            - DomainName: !GetAtt S3Bucket.DomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
          Enabled: true
          HttpVersion: 'http2'
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            FunctionAssociations:
              - EventType: viewer-response
                FunctionARN: !GetAtt HstsCloudfrontFunction.FunctionMetadata.FunctionARN
          ViewerCertificate:
            Fn::If:
              - CreateCustomCloudFrontDomain
              - AcmCertificateArn: ${ssm:/configuration/cloudfront/certificate_arn, ""}
                MinimumProtocolVersion: TLSv1
                SslSupportMethod: sni-only
              - CloudFrontDefaultCertificate: true
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          WebACLId: !GetAtt CloudFrontWebAcl.Arn

    Route53DnsRecord:
      Type: AWS::Route53::RecordSet
      Condition: CreateDnsRecord
      Properties:
        HostedZoneId: ${env:ROUTE_53_HOSTED_ZONE_ID, ""}
        Name: ${env:ROUTE_53_DOMAIN_NAME, ""}
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2
          EvaluateTargetHealth: false
        Type: A

    HstsCloudfrontFunction:
      Type: AWS::CloudFront::Function
      Properties:
        AutoPublish: true
        FunctionCode: |
          function handler(event) {
            var response = event.response;
            var headers = response.headers;
            headers['strict-transport-security'] = { value: 'max-age=63072000; includeSubdomains; preload'};
            return response;
          }
        FunctionConfig:
          Comment: This function adds headers to implement HSTS
          Runtime: cloudfront-js-1.0
        Name: hsts-${sls:stage}
  Outputs:
    S3BucketName:
      Value: !Ref S3Bucket
    CloudFrontDistributionId:
      Value: !Ref CloudFrontDistribution
    CloudFrontEndpointUrl:
      Value:
        Fn::If:
          - CreateCustomCloudFrontDomain
          - https://${ssm:/configuration/cloudfront/domain_name, ""}/
          - !Sub https://${CloudFrontDistribution.DomainName}
