generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HealthPlanPackageTable {
  id        String                    @id
  stateCode String
  state     State                     @relation(fields: [stateCode], references: [stateCode])
  revisions HealthPlanRevisionTable[]
  questions Question[]
}

model ProtoMigrationsTable {
  migrationName String @id
}

model HealthPlanRevisionTable {
  id              String                 @id
  createdAt       DateTime
  pkgID           String
  formDataProto   Bytes
  submittedAt     DateTime?
  unlockedAt      DateTime?
  unlockedBy      String?
  unlockedReason  String?
  submittedBy     String?
  submittedReason String?
  pkg             HealthPlanPackageTable @relation(fields: [pkgID], references: [id])
}

model ContractTable {
  id        String                  @id
  revisions ContractRevisionTable[]
}

model RateTable {
  id        String              @id
  revisions RateRevisionTable[]
}

model ContractRevisionTable {
  id         String        @id
  contractID String
  contract   ContractTable @relation(fields: [contractID], references: [id])
  rateRevisions RateRevisionsOnContractRevisionsTable[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name                String
  
  draftFormData DraftContractFormDataTable @relation(fields: [draftFormDataID], references: [id])
  draftFormDataID String @unique
}

enum SubmissionType {
  CONTRACT_ONLY
  CONTRACT_AND_RATES
}

enum FederalAuthority {
  STATE_PLAN
  WAIVER_1915B
  WAIVER_1115
  VOLUNTARY
  BENCHMARK
  TITLE_XXI
}

model ContractDocumentTable {
  id String @id
  contractFormDataID String
  contractFormData DraftContractFormDataTable @relation(fields: [contractFormDataID], references: [id])

  s3url String
  title String
}

model ContractAdditionalDocumentsTable {
  id String @id
  contractFormDataID String
  contractFormData DraftContractFormDataTable @relation(fields: [contractFormDataID], references: [id])
  
  s3url String
  title String
}

model DraftContractFormDataTable {
  id String @id
  revision ContractRevisionTable?

  contractDescription String?
  startDate DateTime? @db.Date
  endDate DateTime? @db.Date
  submissionType SubmissionType?
  federalAuthorities FederalAuthority[]
  modifiedGeoAreaServed Boolean?
  modifiedRiskSharingStrategy Boolean?
  modifiedPassThroughPayments Boolean?
  contractDocuments ContractDocumentTable[]
  additionalDocuments ContractAdditionalDocumentsTable[]

}

model RateRevisionTable {
  id     String    @id
  rateID String
  rate   RateTable @relation(fields: [rateID], references: [id])
  contractRevisions RateRevisionsOnContractRevisionsTable[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name        String
  rateCertURL String?
}

model RateRevisionsOnContractRevisionsTable {
  rateRevisionID String
  rateRevision   RateRevisionTable @relation(fields: [rateRevisionID], references: [id])
  contractRevisionID String
  contractRevision ContractRevisionTable @relation(fields: [contractRevisionID], references: [id])

  validAfter DateTime @default(now())
  validUntil DateTime?
  updatedAt DateTime @default(now()) @updatedAt

  @@id([rateRevisionID, contractRevisionID, validAfter])

}

model State {
  stateCode                   String                   @id
  name                        String
  latestStateSubmissionNumber Int                      @default(0)
  statePackages               HealthPlanPackageTable[]
  users                       User[]
}

model User {
  id               String             @id
  givenName        String
  familyName       String
  email            String
  role             Role
  stateAssignments State[]
  stateCode        String?
  questions        Question[]
  responses        QuestionResponse[]
}

model Question {
  id            String                 @id
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @default(now()) @updatedAt
  pkgID         String
  pkg           HealthPlanPackageTable @relation(fields: [pkgID], references: [id])
  addedBy       User                   @relation(fields: [addedByUserID], references: [id])
  addedByUserID String
  documents     QuestionDocument[]
  responses     QuestionResponse[]
}

model QuestionDocument {
  id         String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  name       String
  s3URL      String
  questionID String
  question   Question @relation(fields: [questionID], references: [id])
}

model QuestionResponseDocument {
  id         String           @id
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  response   QuestionResponse @relation(fields: [responseID], references: [id])
  responseID String
  name       String
  s3URL      String
}

model QuestionResponse {
  id            String                     @id
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  question      Question                   @relation(fields: [questionID], references: [id])
  addedBy       User                       @relation(fields: [addedByUserID], references: [id])
  questionID    String
  addedByUserID String
  documents     QuestionResponseDocument[]
}

enum Role {
  CMS_USER
  STATE_USER
  ADMIN_USER
}
