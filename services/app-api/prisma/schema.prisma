generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HealthPlanPackageTable {
  id        String                    @id
  stateCode String
  state     State                     @relation(fields: [stateCode], references: [stateCode])
  revisions HealthPlanRevisionTable[]
  questions Question[]
}

model ProtoMigrationsTable {
  migrationName String @id
}

model HealthPlanRevisionTable {
  id              String                 @id
  createdAt       DateTime
  pkgID           String
  formDataProto   Bytes
  submittedAt     DateTime?
  unlockedAt      DateTime?
  unlockedBy      String?
  unlockedReason  String?
  submittedBy     String?
  submittedReason String?
  pkg             HealthPlanPackageTable @relation(fields: [pkgID], references: [id])
}

model ContractTable {
  id          String                  @id
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @default(now()) @updatedAt
  submittedAt DateTime?

  stateCode   String
  state       State                   @relation(fields: [stateCode], references: [stateCode])
  stateNumber Int
  status      FormDataStatus

  revisions   ContractRevisionTable[]
  draftRateRevisions RateRevisionTable[]
}

model RateTable {
  id          String                  @id
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @default(now()) @updatedAt
  submittedAt DateTime?

  revisions RateRevisionTable[]
  draftContractRevisions ContractRevisionTable[]
}

model ContractRevisionTable {
  id            String                                  @id
  contractID    String
  contract      ContractTable                           @relation(fields: [contractID], references: [id])
  rateRevisions RateRevisionsOnContractRevisionsTable[]

  draftRates RateTable[]

  unlockInfoID String?
  unlockInfo   UpdateInfoTable? @relation("unlockContractInfo", fields: [unlockInfoID], references: [id])
  submitInfoID String?
  submitInfo   UpdateInfoTable? @relation("submitContractInfo", fields: [submitInfoID], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name String
  contractFormData ContractFormData?
}

model RateRevisionTable {
  id                String                                  @id
  rateID            String
  rate              RateTable                               @relation(fields: [rateID], references: [id])
  contractRevisions RateRevisionsOnContractRevisionsTable[]

  draftContracts ContractTable[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  unlockInfoID String?
  unlockInfo   UpdateInfoTable? @relation("unlockRateInfo", fields: [unlockInfoID], references: [id])
  submitInfoID String?
  submitInfo   UpdateInfoTable? @relation("submitRateInfo", fields: [submitInfoID], references: [id])

  name String
  rateFormData RateFormData?
}

model RateRevisionsOnContractRevisionsTable {
  rateRevisionID     String
  rateRevision       RateRevisionTable     @relation(fields: [rateRevisionID], references: [id])
  contractRevisionID String
  contractRevision   ContractRevisionTable @relation(fields: [contractRevisionID], references: [id])

  validAfter DateTime
  validUntil DateTime?
  updatedAt  DateTime  @default(now()) @updatedAt

  isRemoval Boolean @default(false)

  @@id([rateRevisionID, contractRevisionID, validAfter])
}

model UpdateInfoTable {
  id String @id

  updatedAt     DateTime
  updatedByID   String
  updatedBy     User     @relation(fields: [updatedByID], references: [id])
  updatedReason String

  unlockedContracts ContractRevisionTable[] @relation("unlockContractInfo")
  submitedContracts ContractRevisionTable[] @relation("submitContractInfo")
  unlockedRates     RateRevisionTable[]     @relation("unlockRateInfo")
  submitedRates     RateRevisionTable[]     @relation("submitRateInfo")
}

model ContractFormData {
  id                                           String                       @id @default(uuid()) @unique
  createdAt                                    DateTime                     @default(now())
  updatedAt                                    DateTime                     @default(now()) @updatedAt

  submissionType                               SubmissionType?
  submissionDescription                        String?
  programIDs                                   String[]
  populationCovered                            PopulationCoverageType?
  riskBasedContract                            Boolean?
  stateContacts                                StateContact[]
  addtlActuaryContacts                         ActuaryContact[]
  addtlActuaryCommunicationPreference          ActuaryCommunication?
  supportingDocuments                          ContractSupportingDocument[]
  contractType                                 ContractType?
  contractExecutionStatus                      ContractExecutionStatus?
  contractDocuments                            ContractDocument[]
  contractDateStart                            DateTime?
  contractDateEnd                              DateTime?
  managedCareEntities                          ManagedCareEntity[]
  federalAuthorities                           FederalAuthority[]
  modifiedBenefitsProvided                     Boolean
  modifiedGeoAreaServed                        Boolean
  modifiedMedicaidBeneficiaries                Boolean
  modifiedRiskSharingStrategy                  Boolean
  modifiedIncentiveArrangements                Boolean
  modifiedWitholdAgreements                    Boolean
  modifiedStateDirectedPayments                Boolean
  modifiedPassThroughPayments                  Boolean
  modifiedPaymentsForMentalDiseaseInstitutions Boolean
  modifiedMedicalLossRatioStandards            Boolean
  modifiedOtherFinancialPaymentIncentive       Boolean
  modifiedEnrollmentProcess                    Boolean
  modifiedGrevienceAndAppeal                   Boolean
  modifiedNetworkAdequacyStandards             Boolean
  modifiedLengthOfContract                     Boolean
  modifiedNonRiskPaymentArrangements           Boolean
  inLieuServicesAndSettings                    Boolean

  contractRevisionID  String  @unique
  contractRevision ContractRevisionTable @relation(fields: [contractRevisionID], references: [id])
}

model RateFormData {
  id                             String                   @id @default(uuid())
  createdAt                      DateTime                 @default(now())
  updatedAt                      DateTime                 @default(now()) @updatedAt

  submittedAt                    DateTime?
  rateType                       RateType?
  rateCapitationType             RateCapitationType?
  rateDocuments                  RateDocument[]
  supportingDocuments            RateSupportingDocument[]
  rateDateStart                  DateTime?
  rateDateEnd                    DateTime?
  rateDateCertified              DateTime?
  amendmentEffectiveDateStart    DateTime?
  amendmentEffectiveDateEnd      DateTime?
  rateProgramIDs                 String[]
  rateCertificationName          String?
  actuaryContacts                ActuaryContact[]
  actuaryCommunicationPreference ActuaryCommunication?

  rateRevisionID  String  @unique
  rateRevision RateRevisionTable @relation(fields: [rateRevisionID], references: [id])
}

model ActuaryContact {
  id                 String            @id @default(uuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt

  titleRole          String
  email              String
  actuarialFirm      ActuarialFirm
  actuarialFirmOther String?

  contractFormDataID String?
  contractFormData   ContractFormData? @relation(fields: [contractFormDataID], references: [id])
  rateFormDataID     String?
  rateFormData       RateFormData?     @relation(fields: [rateFormDataID], references: [id])
}

model ContractDocument {
  id                 String             @id @default(uuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt

  name               String
  s3URL              String
  documentCategories DocumentCategory[]
  sha256             String?

  contractFormDataID String
  contractFormData   ContractFormData   @relation(fields: [contractFormDataID], references: [id])
}

model ContractSupportingDocument {
  id                 String             @id @default(uuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt

  name               String
  s3URL              String
  documentCategories DocumentCategory[]
  sha256             String?

  contractFormDataID String
  contractFormData   ContractFormData   @relation(fields: [contractFormDataID], references: [id])
}

model RateDocument {
  id                 String             @id @default(uuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt

  name               String
  s3URL              String
  documentCategories DocumentCategory[]
  sha256             String?

  rateFormDataID     String
  rateFormData       RateFormData       @relation(fields: [rateFormDataID], references: [id])
}

model RateSupportingDocument {
  id                 String             @id @default(uuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt

  name               String
  s3URL              String
  documentCategories DocumentCategory[]
  sha256             String?

  rateFormDataID     String
  rateFormData       RateFormData       @relation(fields: [rateFormDataID], references: [id])
}

model StateContact {
  id                 String           @id @default(uuid())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now()) @updatedAt

  name               String
  titleRole          String
  email              String

  contractFormDataID String
  contractFormData   ContractFormData @relation(fields: [contractFormDataID], references: [id])
}

model State {
  stateCode                   String @id
  name                        String
  latestStateSubmissionNumber Int    @default(0)

  statePackages HealthPlanPackageTable[]
  users         User[]
  contract      ContractTable[]
}

model User {
  id                 String    @id
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  givenName          String
  familyName         String
  email              String
  role               Role
  divisionAssignment Division?
  stateCode          String?

  stateAssignments      State[]
  questions             Question[]
  responses             QuestionResponse[]
  audits                UserAudit[]
  updatedByAuditEntries UserAudit[]        @relation("UpdatedBy")
  updateInfos           UpdateInfoTable[]
}

model UserAudit {
  id              String      @id @default(uuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  modifiedUserId  String      @map("userId")
  user            User        @relation(fields: [modifiedUserId], references: [id])
  updatedBy       User        @relation("UpdatedBy", fields: [updatedByUserId], references: [id])
  updatedByUserId String
  action          AuditAction
  description     String?
  priorValue      Json?
}

model Question {
  id            String                 @id
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @default(now()) @updatedAt
  pkgID         String
  pkg           HealthPlanPackageTable @relation(fields: [pkgID], references: [id])
  addedBy       User                   @relation(fields: [addedByUserID], references: [id])
  addedByUserID String
  division      Division
  documents     QuestionDocument[]
  responses     QuestionResponse[]
}

model QuestionDocument {
  id         String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  name       String
  s3URL      String
  questionID String
  question   Question @relation(fields: [questionID], references: [id])
}

model QuestionResponseDocument {
  id         String           @id
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  response   QuestionResponse @relation(fields: [responseID], references: [id])
  responseID String
  name       String
  s3URL      String
}

model QuestionResponse {
  id            String                     @id
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  question      Question                   @relation(fields: [questionID], references: [id])
  addedBy       User                       @relation(fields: [addedByUserID], references: [id])
  questionID    String
  addedByUserID String
  documents     QuestionResponseDocument[]
}

enum Division {
  DMCO
  DMCP
  OACT
}

enum Role {
  CMS_USER
  STATE_USER
  ADMIN_USER
}

enum AuditAction {
  CHANGED_STATE_ASSIGNMENT
  CHANGED_DIVISION_ASSIGNMENT
}

enum RateType {
  NEW
  AMENDMENT
}

enum RateCapitationType {
  RATE_CELL
  RATE_RANGE
}

enum ManagedCareEntity {
  MCO
  PIHP
  PAHP
  PCCM
}

enum FederalAuthority {
  STATE_PLAN
  WAIVER_1915B
  WAIVER_1115
  VOLUNTARY
  BENCHMARK
  TITLE_XXI
}

enum ContractExecutionStatus {
  EXECUTED
  UNEXECUTED
}

enum ContractType {
  BASE
  AMENDMENT
}

enum DocumentCategory {
  CONTRACT
  RATES
  CONTRACT_RELATED
  RATES_RELATED
}

enum ActuaryCommunication {
  OACT_TO_ACTUARY
  OACT_TO_STATE
}

enum ActuarialFirm {
  MERCER
  MILLIMAN
  OPTUMAS
  GUIDEHOUSE
  DELOITTE
  STATE_IN_HOUSE
  OTHER
}

enum PopulationCoverageType {
  MEDICAID
  CHIP
  MEDICAID_AND_CHIP
}

enum SubmissionType {
  CONTRACT_ONLY
  CONTRACT_AND_RATES
}

enum FormDataStatus {
  DRAFT
  SUBMITTED
}
