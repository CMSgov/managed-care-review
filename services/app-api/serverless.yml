service: app-api

frameworkVersion: '2'

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-online
  - serverless-associate-waf
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper
  - serverless-idempotency-helper
  - serverless-iam-helper

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  appVersion: ${env:APP_VERSION}
  applicationEndpoint: ${cf:ui-${self:custom.stage}.CloudFrontEndpointUrl, env:APPLICATION_ENDPOINT}
  emailSource: ${env:SES_SOURCE_EMAIL_ADDRESS}
  emailerMode: ${env:EMAILER_MODE}
  emailReviewTeamAddresses: ${env:SES_REVIEW_TEAM_EMAIL_ADDRESSES}
  auroraArn: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:postgres-${self:custom.stage}.PostgresAuroraArn }
  draftSubmissionsTableArn: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:database-${self:custom.stage}.DraftSubmissionsTableArn}
  draftSubmissionsTableStreamArn: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:database-${self:custom.stage}.DraftSubmissionsTableStreamArn}
  iamPath: ${env:IAM_PATH, "/"}
  iamPermissionsBoundaryPolicy: ${env:FULL_IAM_PERMISSIONS_BOUNDARY_POLICY, ""}
  document_uploads_bucket_arn: ${cf:uploads-${self:custom.stage}.DocumentUploadsBucketArn}
  document_zips_bucket_arn: ${cf:uploads-${self:custom.stage}.DocumentZipsBucketArn}
  secretsManagerSecret: aurora_postgres_${self:custom.stage} #pragma: allowlist secret
  reactAppAuthMode: ${env:REACT_APP_AUTH_MODE}
  dbURL: ${env:DATABASE_URL}
  webAclName: ${self:service}-${self:custom.stage}-webacl
  associateWaf:
    name: ${self:custom.webAclName}
    version: V2
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'yarn'
    includeModules:
      nodeModulesRelativeDir: '../../'
    excludeRegex: 'darwin|debian'
  serverlessTerminationProtection:
    stages:
      - dev
      - val
      - prod
      - main
  vpcId: ${ssm:/configuration/${self:custom.stage}/vpc/id, ssm:/configuration/default/vpc/id}
  sgId: ${ssm:/configuration/${self:custom.stage}/vpc/sg/id, ssm:/configuration/default/vpc/sg/id}
  privateSubnets:
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/a/id, ssm:/configuration/default/vpc/subnets/private/a/id}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/b/id, ssm:/configuration/default/vpc/subnets/private/b/id}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/c/id, ssm:/configuration/default/vpc/subnets/private/c/id}

provider:
  name: aws
  lambdaHashingVersion: 20201221
  runtime: nodejs14.x
  region: us-east-1
  stage: dev
  logs:
    restApi: true
  apiGateway:
    shouldStartNameWithService: true
  iam:
    role:
      path: ${self:custom.iamPath}
      permissionsBoundary: ${self:custom.iamPermissionsBoundaryPolicy}
      statements:
        - Effect: 'Allow' # cognito user lookup
          Action:
            - cognito-idp:ListUsers
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - secretsmanager:GetSecretValue #pragma: allowlist secret
            - secretsmanager:DescribeSecret #pragma: allowlist secret
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - rds-db:connect
          Resource:
            - ${self:custom.auroraArn}
        - Effect: 'Allow'
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - lambda:InvokeFunction
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - 's3:*'
          Resource:
            # this is the "public" folder for all regular uploads from Amplify
            - ${self:custom.document_uploads_bucket_arn}/allusers/*
            - ${self:custom.document_zips_bucket_arn}/*

  environment:
    stage: ${self:custom.stage}
    appVersion: ${self:custom.appVersion}
    DATABASE_URL: ${self:custom.dbURL}
    REACT_APP_AUTH_MODE: ${self:custom.reactAppAuthMode}
    SECRETS_MANAGER_SECRET: ${self:custom.secretsManagerSecret}
    EMAILER_MODE: ${self:custom.emailerMode}
    SES_SOURCE_EMAIL_ADDRESS: ${self:custom.emailSource}
    SES_REVIEW_TEAM_EMAIL_ADDRESSES: ${self:custom.emailReviewTeamAddresses}
    APPLICATION_ENDPOINT: ${self:custom.applicationEndpoint}

layers:
  prismaClient:
    path: lambda-layers-prisma-client

functions:
  email_submit:
    handler: handlers/email_submit.main
    events:
      - http:
          path: email_submit
          method: post
          cors: true

  health:
    handler: handlers/health_check.main
    events:
      - http:
          path: health_check
          method: get
          cors: true

  log_event:
    handler: handlers/log_event.main
    events:
      - http:
          path: log_event
          method: post
          cors: true

  graphql:
    handler: handlers/apollo_gql.graphqlHandler
    events:
      - http:
          path: graphql
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: graphql
          method: get
          cors: true
          authorizer: aws_iam
    timeout: 60 # aurora cold start can be long
    vpc:
      securityGroupIds:
        - ${self:custom.sgId}
      subnetIds: ${self:custom.privateSubnets}
    layers:
      - !Ref PrismaClientLambdaLayer

  hello:
    handler: handlers/hello.main
    events:
      - http:
          path: hello
          method: get
          cors: true
          authorizer: aws_iam

  postgres:
    handler: handlers/postgres_check.main
    events:
      - http:
          path: postgres_check
          method: get
          cors: true
    vpc:
      securityGroupIds:
        - ${self:custom.sgId}
      subnetIds: ${self:custom.privateSubnets}
    layers:
      - !Ref PrismaClientLambdaLayer

  migrate:
    handler: handlers/postgres_migrate.main
    timeout: 60 # aurora cold start can be long
    vpc:
      securityGroupIds:
        - ${self:custom.sgId}
      subnetIds: ${self:custom.privateSubnets}
    layers:
      - !Ref PrismaClientLambdaLayer

  zip_keys:
    handler: handlers/bulk_download.main
    events:
      - http:
          path: zip
          method: post
          cors: true
          authorizer: aws_iam

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
    ApiGwWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        Name: ${self:custom.stage}-ApiGwWebAcl
        DefaultAction:
          Block: {}
        Rules:
          - Action:
              Allow: {}
            Name: ${self:custom.stage}-allow-usa-plus-territories
            Priority: 0
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU # Guam
                  - PR # Puerto Rico
                  - US # USA
                  - UM # US Minor Outlying Islands
                  - VI # US Virgin Islands
                  - MP # Northern Mariana Islands
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: WafWebAcl
        Scope: REGIONAL
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          SampledRequestsEnabled: true
          MetricName: ${self:custom.webAclName}
  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiAuthMode:
      Value: ${self:custom.reactAppAuthMode}
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
