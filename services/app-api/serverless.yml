service: app-api

frameworkVersion: '2'

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-associate-waf
  - serverless-stack-termination-protection

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  appVersion: ${env:APP_VERSION}
  draftSubmissionsTableArn: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:database-${self:custom.stage}.DraftSubmissionsTableArn}
  draftSubmissionsTableStreamArn: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:database-${self:custom.stage}.DraftSubmissionsTableStreamArn}
  iamPath: ${env:IAM_PATH, "/"}
  iamPermissionsBoundaryPolicy: ${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}
  secretsManagerSecret: aurora-postgres-${self:custom.stage}
  reactAppAuthMode: ${env:REACT_APP_AUTH_MODE}
  dynamoConnection: ${env:DYNAMO_CONNECTION}
  webAclName: ${self:service}-${self:custom.stage}-webacl
  associateWaf:
    name: ${self:custom.webAclName}
    version: V2
  bundle:
    packager: yarn
  serverlessTerminationProtection:
    stages:
      - dev
      - val
      - prod
      - main

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: dev
  apiGateway:
    shouldStartNameWithService: true

  environment:
    stage: ${self:custom.stage}
    appVersion: ${self:custom.appVersion}
    DYNAMO_CONNECTION: ${self:custom.dynamoConnection}
    REACT_APP_AUTH_MODE: ${self:custom.reactAppAuthMode}
    SECRETS_MANAGER_SECRET: ${self:custom.secretsManagerSecret}

functions:
  health:
    handler: handlers/health_check.main
    role: LambdaApiRole
    events:
      - http:
          path: health_check
          method: get
          cors: true

  log_event:
    handler: handlers/log_event.main
    role: LambdaApiRole
    events:
      - http:
          path: log_event
          method: post
          cors: true

  graphql:
    handler: handlers/apollo_gql.graphqlHandler
    role: LambdaApiRole
    events:
      - http:
          path: graphql
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: graphql
          method: get
          cors: true
          authorizer: aws_iam

  hello:
    handler: handlers/hello.main
    role: LambdaApiRole
    events:
      - http:
          path: hello
          method: get
          cors: true
          authorizer: aws_iam

resources:
  Conditions:
    CreatePermissionsBoundary:
      Fn::Not:
        - Fn::Equals:
            - ''
            - ${env:IAM_PERMISSIONS_BOUNDARY_POLICY, ""}
  Resources:
    LambdaApiRole: # Why isn't this with the function as an iamRoleStatements?  https://github.com/serverless/serverless/issues/6485
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service: 'lambda.amazonaws.com'
              Action: 'sts:AssumeRole'
        Path: ${self:custom.iamPath}
        PermissionsBoundary:
          Fn::If:
            - CreatePermissionsBoundary
            - !Sub arn:aws:iam::${AWS::AccountId}:policy${self:custom.iamPermissionsBoundaryPolicy}
            - !Ref AWS::NoValue
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: 'LambdaApiRolePolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 'arn:aws:logs:*:*:*'
                - Effect: 'Allow'
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    - ${self:custom.draftSubmissionsTableArn}
                    - ${self:custom.draftSubmissionsTableArn}/index/*
                    - ${self:custom.draftSubmissionsTableStreamArn}
                - Effect: 'Allow'
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource: !Sub /arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}
                - Effect: 'Allow'
                  Action:
                    - cognito-idp:ListUsers
                  Resource: '*'
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
    ApiGwWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        Name: ${self:custom.stage}-ApiGwWebAcl
        DefaultAction:
          Block: {}
        Rules:
          - Action:
              Allow: {}
            Name: ${self:custom.stage}-allow-usa-plus-territories
            Priority: 0
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU # Guam
                  - PR # Puerto Rico
                  - US # USA
                  - UM # US Minor Outlying Islands
                  - VI # US Virgin Islands
                  - MP # Northern Mariana Islands
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: WafWebAcl
        Scope: REGIONAL
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          SampledRequestsEnabled: true
          MetricName: ${self:custom.webAclName}
  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiAuthMode:
      Value: ${self:custom.reactAppAuthMode}
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
