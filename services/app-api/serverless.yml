service: app-api

frameworkVersion: '^3.19.0'

package:
  individually: true
  patterns:
    - '!node_modules/prisma'
    - '!node_modules/.prisma'
    - '!node_modules/@prisma'

plugins:
  - serverless-offline-ssm
  - serverless-offline
  - serverless-webpack
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper
  - serverless-idempotency-helper
  - serverless-iam-helper

custom:
  region: ${aws:region}
  applicationEndpoint: ${env:APPLICATION_ENDPOINT, cf:ui-${sls:stage}.CloudFrontEndpointUrl}
  appApiGatewayId: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:infra-api-${sls:stage}.ApiGatewayRestApiId}
  appApiGatewayRootResourceId: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:infra-api-${sls:stage}.AppApiGatewayRootResourceId}
  appApiWafAclArn: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:infra-api-${sls:stage}.WafPluginAclArn}
  emailerMode: ${env:EMAILER_MODE, ssm:/configuration/emailer_mode}
  parameterStoreMode: ${env:PARAMETER_STORE_MODE, ssm:/configuration/parameterStoreMode}
  auroraV2Arn: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:postgres-${sls:stage}.PostgresAuroraV2Arn }
  document_uploads_bucket_arn: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:uploads-${sls:stage}.DocumentUploadsBucketArn}
  qa_uploads_bucket_arn: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:uploads-${sls:stage}.QAUploadsBucketArn}
  secretsManagerSecret: aurora_postgres_${sls:stage} #pragma: allowlist secret
  reactAppAuthMode: ${env:REACT_APP_AUTH_MODE}
  reactAppOtelCollectorUrl: ${env:REACT_APP_OTEL_COLLECTOR_URL, ssm:/configuration/react_app_otel_collector_url}
  dbURL: ${env:DATABASE_URL}
  ldSDKKey: ${env:LD_SDK_KEY, ssm:/configuration/ld_sdk_key_feds}
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'yarn'
    includeModules:
      forceExclude:
        - '@prisma/client'
      nodeModulesRelativeDir: '../../'
    packagerOptions:
      lockFile: '../../yarn.lock'
    excludeRegex: 'darwin|debian'
  serverlessTerminationProtection:
    stages:
      - dev
      - val
      - prod
      - main
  serverless-offline-ssm:
    stages:
      - local
      - offline
    ssm:
      '/configuration/default/vpc/id': 'offline'
      '/configuration/default/vpc/sg/id': 'offline'
      '/configuration/default/vpc/subnets/private/a/id': 'offline'
      '/configuration/default/vpc/subnets/private/b/id': 'offline'
      '/configuration/default/vpc/subnets/private/c/id': 'offline'
      '/configuration/iam/full_permissions_boundary_policy': 'arn:aws:iam::local:policy/local/developer-boundary-policy'
  vpcId: ${ssm:/configuration/${sls:stage}/vpc/id, ssm:/configuration/default/vpc/id}
  sgId: ${ssm:/configuration/${sls:stage}/vpc/sg/id, ssm:/configuration/default/vpc/sg/id}
  privateSubnets:
    - ${ssm:/configuration/${sls:stage}/vpc/subnets/private/a/id, ssm:/configuration/default/vpc/subnets/private/a/id}
    - ${ssm:/configuration/${sls:stage}/vpc/subnets/private/b/id, ssm:/configuration/default/vpc/subnets/private/b/id}
    - ${ssm:/configuration/${sls:stage}/vpc/subnets/private/c/id, ssm:/configuration/default/vpc/subnets/private/c/id}

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  apiGateway:
    restApiId: ${self:custom.appApiGatewayId}
    restApiRootResourceId: ${self:custom.appApiGatewayRootResourceId}
  layers:
    - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-9-1:1
  iam:
    role:
      path: ${ssm:/configuration/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/iam/full_permissions_boundary_policy}
      statements:
        - Effect: 'Allow' # cognito user lookup
          Action:
            - cognito-idp:ListUsers
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - secretsmanager:GetSecretValue #pragma: allowlist secret
            - secretsmanager:DescribeSecret #pragma: allowlist secret
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - rds-db:connect
          Resource:
            - ${self:custom.auroraV2Arn}
        - Effect: 'Allow'
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - lambda:InvokeFunction
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - 's3:*'
          Resource:
            # this is the "public" folder for all regular uploads from Amplify
            - ${self:custom.document_uploads_bucket_arn}/allusers/*
            - ${self:custom.qa_uploads_bucket_arn}/allusers/*

        - Effect: 'Allow'
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - rds:CreateDBClusterSnapshot
            - rds:CreateDBSnapshot
            - rds:CopyDBClusterSnapshot
            - rds:CopyDBSnapshot
            - rds:DescribeDBClusterSnapshots
            - rds:DeleteDBClusterSnapshot
          Resource: '*'

  environment:
    stage: ${sls:stage}
    DATABASE_URL: ${self:custom.dbURL}
    REACT_APP_AUTH_MODE: ${self:custom.reactAppAuthMode}
    REACT_APP_OTEL_COLLECTOR_URL: ${self:custom.reactAppOtelCollectorUrl}
    SECRETS_MANAGER_SECRET: ${self:custom.secretsManagerSecret}
    EMAILER_MODE: ${self:custom.emailerMode}
    PARAMETER_STORE_MODE: ${self:custom.parameterStoreMode}
    APPLICATION_ENDPOINT: ${self:custom.applicationEndpoint, 'http://localhost:3000'}
    AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
    OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /var/task/collector.yml
    LD_SDK_KEY: ${self:custom.ldSDKKey}

layers:
  prismaClientMigration:
    path: lambda-layers-prisma-client-migration
  prismaClientEngine:
    path: lambda-layers-prisma-client-engine

functions:
  email_submit:
    handler: src/handlers/email_submit.main

  add_sha:
    handler: src/handlers/add_sha.main
    layers:
      - !Ref PrismaClientEngineLambdaLayer
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-9-1:1
    timeout: 300
    vpc:
      securityGroupIds:
        - ${self:custom.sgId}
      subnetIds: ${self:custom.privateSubnets}

  health:
    handler: src/handlers/health_check.main
    events:
      - http:
          path: health_check
          method: get
          cors: true

  reports:
    handler: src/handlers/reports.main
    events:
      - http:
          path: reports
          method: get
          cors: true
          authorizer: aws_iam
    layers:
      - !Ref PrismaClientEngineLambdaLayer
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-9-1:1
    timeout: 60
    vpc:
      securityGroupIds:
        - ${self:custom.sgId}
      subnetIds: ${self:custom.privateSubnets}

  otel:
    handler: src/handlers/otel_proxy.main
    events:
      - http:
          path: otel
          method: post
          cors: true

  graphql:
    handler: src/handlers/apollo_gql.graphqlHandler
    events:
      - http:
          path: graphql
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: graphql
          method: get
          cors: true
          authorizer: aws_iam
    timeout: 60 # aurora cold start can be long
    vpc:
      securityGroupIds:
        - ${self:custom.sgId}
      subnetIds: ${self:custom.privateSubnets}
    layers:
      - !Ref PrismaClientEngineLambdaLayer
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-9-1:1

  migrate:
    handler: src/handlers/postgres_migrate.main
    timeout: 60
    vpc:
      securityGroupIds:
        - ${self:custom.sgId}
      subnetIds: ${self:custom.privateSubnets}
    layers:
      - !Ref PrismaClientMigrationLambdaLayer
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-9-1:1

  zip_keys:
    handler: src/handlers/bulk_download.main
    events:
      - http:
          path: zip
          method: post
          cors: true
          authorizer: aws_iam

  cleanup:
    handler: src/handlers/cleanup.main
    events:
      - schedule: cron(0 14 ? * MON-FRI *)
    layers:
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-9-1:1

resources:
  Resources:
    ApiGwWebAclAssociation:
      Type: AWS::WAFv2::WebACLAssociation
      DependsOn: 'ApiGatewayDeployment${sls:instanceId}'
      Properties:
        ResourceArn: arn:aws:apigateway:${self:provider.region}::/restapis/${self:custom.appApiGatewayId}/stages/${sls:stage}
        WebACLArn: ${self:custom.appApiWafAclArn}
  Outputs:
    ApiAuthMode:
      Value: ${self:custom.reactAppAuthMode}
    Region:
      Value: !Sub ${AWS::Region}
