service: uploads

frameworkVersion: '4.2.3'

package:
  individually: true

plugins:
  - serverless-esbuild
  - serverless-stack-termination-protection
  - serverless-iam-helper
  - serverless-s3-local
  - serverless-offline

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  iam:
    role:
      path: ${ssm:/configuration/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/iam/full_permissions_boundary_policy}
      statements:
        - Effect: 'Allow'
          Action:
            - s3:GetObject
            - s3:GetObjectTagging
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:PutObjectTagging
            - s3:PutObjectVersionTagging
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - !Sub arn:aws:s3:::${self:service}-${sls:stage}-uploads-${AWS::AccountId}/*
            - !Sub arn:aws:s3:::${self:service}-${sls:stage}-avscan-${AWS::AccountId}/*
            - !Sub arn:aws:s3:::${self:service}-${sls:stage}-qa-${AWS::AccountId}/*
        - Effect: 'Allow'
          Action:
            - s3:ListBucket
          Resource:
            - !Sub arn:aws:s3:::${self:service}-${sls:stage}-uploads-${AWS::AccountId}
            - !Sub arn:aws:s3:::${self:service}-${sls:stage}-avscan-${AWS::AccountId}
            - !Sub arn:aws:s3:::${self:service}-${sls:stage}-qa-${AWS::AccountId}
        - Effect: 'Allow'
          Action:
            - lambda:InvokeFunction
          Resource:
            - !Sub arn:aws:lambda:${self:provider.region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-avAuditFiles

custom:
  region: ${aws:region}
  reactAppOtelCollectorUrl: ${env:VITE_APP_OTEL_COLLECTOR_URL, ssm:/configuration/react_app_otel_collector_url}
  authorizedKeys: ${file(../postgres/scripts/authorized_keys)}
  esbuild:
    config: ./esbuild.config.js
  vpcId: ${env:VPC_ID}
  sgId: ${env:SG_ID}
  privateSubnets:
    - ${env:SUBNET_PRIVATE_A_ID}
    - ${env:SUBNET_PRIVATE_B_ID}
    - ${env:SUBNET_PRIVATE_C_ID}
  publicSubnetA: ${env:SUBNET_PUBLIC_A_ID}
  iamPermissionsBoundary: ${env:IAM_PERMISSIONS_BOUNDARY}
  iamPath: ${env:IAM_PATH}
  s3:
    # address: 127.0.0.1 # this started defaulting to ipv6 which prevented tests from connecting
    # when vhostBuckets are enabled all non-localhost hostnames are re-written as buckets
    # setting this false allows the workaround for docker to work.
    vhostBuckets: false
    directory: ./local_buckets
    cors: ./local_cors.xml
    buckets:
      - local-uploads # This is a little silly, but I've spent enough time on it.
        # the serverless-s3-local plugin starts any bucket with a BucketName
        # the attachments bucket has no name, so we need to make one up on our own
      - local-qa
      - test-uploads
      - test-audit
      - test-av-definitions
  serverlessTerminationProtection:
    stages:
      - dev
      - val
      - prod
      - main

layers:
  clamAv:
    path: lambda-layers-clamav

functions:
  avScan:
    handler: src/lambdas/avScan.main
    name: ${self:service}-${sls:stage}-avScan
    timeout: 300 # 300 seconds = 5 minutes. Average scan is 25 seconds.
    memorySize: 4096
    ephemeralStorageSize: 1024
    layers:
      - !Ref ClamAvLambdaLayer
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-18-1:4
    vpc:
      securityGroupIds: ${self:custom.sgId}
      subnetIds: ${self:custom.privateSubnets}
    environment:
      stage: ${sls:stage}
      CLAMAV_BUCKET_NAME: !Ref ClamDefsBucket
      PATH_TO_AV_DEFINITIONS: 'lambda/s3-antivirus/av-definitions'
      AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
      OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /var/task/collector.yml
      VITE_APP_OTEL_COLLECTOR_URL: ${self:custom.reactAppOtelCollectorUrl}

  avAuditUploads:
    handler: src/lambdas/avAuditUploads.main
    timeout: 300 # 300 seconds = 5 minutes. Average scan is 25 seconds.
    maximumRetryAttempts: 0
    layers:
      - !Ref ClamAvLambdaLayer
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-18-1:4
    environment:
      stage: ${sls:stage}
      AUDIT_BUCKET_NAME: !Ref DocumentUploadsBucket
      CLAMAV_BUCKET_NAME: !Ref ClamDefsBucket
      PATH_TO_AV_DEFINITIONS: 'lambda/s3-antivirus/av-definitions'
      LIST_INFECTED_FILES_LAMBDA_NAME: ${self:functions.avAuditFiles.name}
      AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
      OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /var/task/collector.yml
      VITE_APP_OTEL_COLLECTOR_URL: ${self:custom.reactAppOtelCollectorUrl}

  avAuditFiles:
    handler: src/lambdas/avAuditFiles.main
    name: ${self:service}-${sls:stage}-avAuditFiles
    timeout: 300 # 300 seconds = 5 minutes. Average scan is 25 seconds.
    memorySize: 2048
    ephemeralStorageSize: 1024
    maximumRetryAttempts: 0
    layers:
      - !Ref ClamAvLambdaLayer
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-18-1:4
    environment:
      stage: ${sls:stage}
      AUDIT_BUCKET_NAME: !Ref DocumentUploadsBucket
      CLAMAV_BUCKET_NAME: !Ref ClamDefsBucket
      PATH_TO_AV_DEFINITIONS: 'lambda/s3-antivirus/av-definitions'
      AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
      OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /var/task/collector.yml
      VITE_APP_OTEL_COLLECTOR_URL: ${self:custom.reactAppOtelCollectorUrl}

resources:
  Conditions:
    IsDevValProd: !Or
      - !Equals ['${sls:stage}', 'main']
      - !Equals ['${sls:stage}', 'val']
      - !Equals ['${sls:stage}', 'prod']

  Resources:
    DocumentUploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${self:service}-${sls:stage}-uploads-${AWS::AccountId}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        CorsConfiguration: # Set the CORS policy
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
              ExposedHeaders:
                - ETag
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function: !GetAtt AvScanLambdaFunction.Arn
      DependsOn: LambdaInvokePermission

    DocumentsUploadsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref DocumentUploadsBucket
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: 'Deny'
              Resource:
                - !Sub ${DocumentUploadsBucket.Arn}/*
              Principal: '*'
              Condition:
                StringNotEquals:
                  s3:ExistingObjectTag/virusScanStatus:
                    - 'CLEAN'
                  s3:ExistingObjectTag/contentsPreviouslyScanned:
                    - 'TRUE'
                  aws:PrincipalArn: !GetAtt IamRoleLambdaExecution.Arn
            - Action: 's3:PutObject'
              Effect: Deny
              Principal: '*'
              NotResource:
                - !Sub ${DocumentUploadsBucket.Arn}/*.csv
                - !Sub ${DocumentUploadsBucket.Arn}/*.doc
                - !Sub ${DocumentUploadsBucket.Arn}/*.docx
                - !Sub ${DocumentUploadsBucket.Arn}/*.pdf
                - !Sub ${DocumentUploadsBucket.Arn}/*.txt
                - !Sub ${DocumentUploadsBucket.Arn}/*.xls
                - !Sub ${DocumentUploadsBucket.Arn}/*.xlsx
                - !Sub ${DocumentUploadsBucket.Arn}/*.zip
                - !Sub ${DocumentUploadsBucket.Arn}/*.xlsm
                - !Sub ${DocumentUploadsBucket.Arn}/*.xltm
                - !Sub ${DocumentUploadsBucket.Arn}/*.xlam
            - Effect: Deny
              Action: 's3:*'
              Principal: '*'
              Condition:
                Bool:
                  'aws:SecureTransport': false
              Resource:
                - !Sub ${DocumentUploadsBucket.Arn}
                - !Sub ${DocumentUploadsBucket.Arn}/*
              Sid: DenyUnencryptedConnections

    LambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt AvScanLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceAccount: !Sub ${AWS::AccountId}
        SourceArn: !Sub arn:aws:s3:::${self:service}-${sls:stage}-uploads-${AWS::AccountId}

    ClamDefsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${self:service}-${sls:stage}-avscan-${AWS::AccountId}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        AccessControl: Private
    ClamsDefsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ClamDefsBucket
        PolicyDocument:
          Statement:
            - Effect: Deny
              Action: 's3:*'
              Principal: '*'
              Condition:
                Bool:
                  'aws:SecureTransport': false
              Resource:
                - !Sub ${ClamDefsBucket.Arn}
                - !Sub ${ClamDefsBucket.Arn}/*
              Sid: DenyUnencryptedConnections

    QAUploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${self:service}-${sls:stage}-qa-${AWS::AccountId}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        CorsConfiguration: # Set the CORS policy
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
              ExposedHeaders:
                - ETag
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function: !GetAtt AvScanLambdaFunction.Arn
      DependsOn: QAInvokePermission

    QAInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt AvScanLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceAccount: !Sub ${AWS::AccountId}
        SourceArn: !Sub arn:aws:s3:::${self:service}-${sls:stage}-qa-${AWS::AccountId}

    QAUploadsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref QAUploadsBucket
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: 'Deny'
              Resource:
                - !Sub ${QAUploadsBucket.Arn}/*
              Principal: '*'
              Condition:
                StringNotEquals:
                  s3:ExistingObjectTag/virusScanStatus:
                    - 'CLEAN'
                  s3:ExistingObjectTag/contentsPreviouslyScanned:
                    - 'TRUE'
                  aws:PrincipalArn: !GetAtt IamRoleLambdaExecution.Arn
            - Action: 's3:PutObject'
              Effect: Deny
              Principal: '*'
              NotResource:
                - !Sub ${QAUploadsBucket.Arn}/*.csv
                - !Sub ${QAUploadsBucket.Arn}/*.doc
                - !Sub ${QAUploadsBucket.Arn}/*.docx
                - !Sub ${QAUploadsBucket.Arn}/*.pdf
                - !Sub ${QAUploadsBucket.Arn}/*.txt
                - !Sub ${QAUploadsBucket.Arn}/*.xls
                - !Sub ${QAUploadsBucket.Arn}/*.xlsx
                - !Sub ${QAUploadsBucket.Arn}/*.zip
                - !Sub ${QAUploadsBucket.Arn}/*.xlsm
                - !Sub ${QAUploadsBucket.Arn}/*.xltm
                - !Sub ${QAUploadsBucket.Arn}/*.xlam
            - Effect: Deny
              Action: 's3:*'
              Principal: '*'
              Condition:
                Bool:
                  'aws:SecureTransport': false
              Resource:
                - !Sub ${QAUploadsBucket.Arn}
                - !Sub ${QAUploadsBucket.Arn}/*
              Sid: DenyUnencryptedConnections

    ClamAVSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for ClamAV daemon
        VpcId: ${self:custom.vpcId}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3310
            ToPort: 3310
            SourceSecurityGroupId: ${self:custom.sgId}

    ClamAVInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: '/delegatedadmin/developer/'
        Roles:
          - !Ref ClamAVInstanceRole

    ClamAVInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        Path: '/delegatedadmin/developer/'
        PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/cms-cloud-admin/ct-ado-poweruser-permissions-boundary-policy'
        RoleName: !Sub 'clamavdVm-${sls:stage}-ServiceRole'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ClamAVInstancePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'

    ClamAVInstance:
      Type: AWS::EC2::Instance
      Condition: IsDevValProd
      Properties:
        InstanceType: t3.medium
        ImageId: ami-0c7217cdde317cfec # Ubuntu 22.04 LTS
        IamInstanceProfile: !Ref ClamAVInstanceProfile
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: '0'
            GroupSet:
              - !Ref ClamAVSecurityGroup
            SubnetId: !Sub ${self:custom.publicSubnetA}
        Tags:
          - Key: Name
            Value: clamavd-${sls:stage}
          - Key: mcr-vmuse
            Value: clamavd
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update
            apt-get install -y clamav clamav-daemon

            echo '${self:custom.authorizedKeys}' > /home/ubuntu/.ssh/authorized_keys
            chown ubuntu:ubuntu /home/ubuntu/.ssh/authorized_keys
            chmod 600 /home/ubuntu/.ssh/authorized_keys

            # Write to the clamd.conf
            echo "TCPSocket 3310" >> /etc/clamav/clamd.conf
            echo "TCPAddr 0.0.0.0" >> /etc/clamav/clamd.conf 
            sed -i 's/^StreamMaxLength .*/StreamMaxLength 50M/' /etc/clamav/clamd.conf

            # Create a systemd service override to delay the start
            cat <<EOF > /etc/systemd/system/clamav-daemon.service.d/override.conf
            [Unit]
            After=network.target
            EOF

            # Create a systemd service override to delay the start and set restart limits
            cat <<EOF > /etc/systemd/system/clamav-daemon.service.d/override.conf
            [Unit]
            After=network.target
            StartLimitIntervalSec=1h
            StartLimitBurst=5
            EOF

            # Fix the systemctl setting
            sed -i 's/^StandardOutput=syslog/StandardOutput=journal/' /lib/systemd/system/clamav-daemon.service

            # Reload systemd to apply the changes
            systemctl daemon-reload

            # Start clamd and get defs
            systemctl enable clamav-daemon
            systemctl enable clamav-freshclam
            systemctl start clamav-daemon
            systemctl start clamav-freshclam

            # Confirm we're up
            systemctl status clamav-daemon
            systemctl status clamav-freshclam

    MCRInternalZone:
      Type: AWS::Route53::HostedZone
      Condition: IsDevValProd
      Properties:
        Name: mc-review.local
        VPCs:
          - VPCId: ${self:custom.vpcId}
            VPCRegion: !Ref AWS::Region

    ClamAVRecordSet:
      Type: AWS::Route53::RecordSet
      Condition: IsDevValProd
      DependsOn: ClamAVInstance
      Properties:
        HostedZoneId: !Ref MCRInternalZone
        Name: clamav.mc-review.local
        Type: A
        ResourceRecords:
          - !GetAtt ClamAVInstance.PrivateIp
        TTL: '300'

  Outputs:
    DocumentUploadsBucketName:
      Value: !Ref DocumentUploadsBucket
    DocumentUploadsBucketArn:
      Value: !GetAtt DocumentUploadsBucket.Arn
    QAUploadsBucketName:
      Value: !Ref QAUploadsBucket
    QAUploadsBucketArn:
      Value: !GetAtt QAUploadsBucket.Arn
    Region:
      Value: !Sub ${AWS::Region}
