service: uploads

frameworkVersion: '^3.19.0'

plugins:
  - serverless-offline-ssm
  - serverless-plugin-scripts
  - serverless-s3-local
  - serverless-offline
  - serverless-stack-termination-protection
  - serverless-idempotency-helper
  - serverless-iam-helper
  - serverless-webpack

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  iam:
    role:
      path: ${ssm:/configuration/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/iam/full_permissions_boundary_policy}
      statements:
        - Effect: 'Allow'
          Action:
            - s3:GetObject
            - s3:GetObjectTagging
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:PutObjectTagging
            - s3:PutObjectVersionTagging
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - !Sub arn:aws:s3:::${self:service}-${sls:stage}-uploads-${AWS::AccountId}/*
            - !Sub arn:aws:s3:::${self:service}-${sls:stage}-avscan-${AWS::AccountId}/*
        - Effect: 'Allow'
          Action:
            - s3:ListBucket
          Resource:
            - !Sub arn:aws:s3:::${self:service}-${sls:stage}-uploads-${AWS::AccountId}
            - !Sub arn:aws:s3:::${self:service}-${sls:stage}-avscan-${AWS::AccountId}

custom:
  region: ${aws:region}
  scripts:
    hooks:
      # This script is run locally when running 'serverless deploy'
      package:initialize: |
        set -e
        curl -L --output lambda_layer.zip https://github.com/CMSgov/lambda-clamav-layer/releases/download/0.7/lambda_layer.zip
      deploy:finalize: |
        rm lambda_layer.zip
        serverless invoke --stage ${sls:stage} --function avDownloadDefinitions -t Event
  serverless-offline-ssm:
    stages:
      - local
      - offline
    ssm:
      '/configuration/iam/full_permissions_boundary_policy': 'arn:aws:iam::local:policy/local/developer-boundary-policy'
  s3:
    # when vhostBuckets are enabled all non-localhost hostnames are re-written as buckets
    # setting this false allows the workaround for docker to work.
    vhostBuckets: false
    directory: ./local_buckets
    cors: ./local_cors.xml
    buckets:
      - local-uploads # This is a little silly, but I've spent enough time on it.
        # the serverless-s3-local plugin starts any bucket with a BucketName
        # the attachments bucket has no name, so we need to make one up on our own
  serverlessTerminationProtection:
    stages:
      - dev
      - val
      - prod
      - main

layers:
  clamDefs:
    package:
      artifact: lambda_layer.zip

functions:
  avScan:
    handler: src/antivirus.lambdaHandleEvent
    name: ${self:service}-${sls:stage}-avScan
    timeout: 300 # 300 seconds = 5 minutes. Average scan is 25 seconds.
    memorySize: 3008
    layers:
      - !Ref ClamDefsLambdaLayer
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-0-1:1
    environment:
      CLAMAV_BUCKET_NAME: !Ref ClamDefsBucket
      PATH_TO_AV_DEFINITIONS: 'lambda/s3-antivirus/av-definitions'
      AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
      OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /var/task/collector.yml

  avDownloadDefinitions:
    handler: src/download-definitions.lambdaHandleEvent
    events:
      - schedule: cron(0 */6 * * ? *)
    timeout: 300 # 300 seconds = 5 minutes
    memorySize: 1024
    layers:
      - !Ref ClamDefsLambdaLayer
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-0-1:1
    environment:
      CLAMAV_BUCKET_NAME: !Ref ClamDefsBucket
      PATH_TO_AV_DEFINITIONS: 'lambda/s3-antivirus/av-definitions'
      AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
      OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /var/task/collector.yml

resources:
  Resources:
    DocumentUploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${self:service}-${sls:stage}-uploads-${AWS::AccountId}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        CorsConfiguration: # Set the CORS policy
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
              ExposedHeaders:
                - ETag
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function: !GetAtt AvScanLambdaFunction.Arn
      DependsOn: LambdaInvokePermission
    DocumentsUploadsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref DocumentUploadsBucket
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: 'Deny'
              Resource: !Sub ${DocumentUploadsBucket.Arn}/*
              Principal: '*'
              Condition:
                StringNotEquals:
                  s3:ExistingObjectTag/virusScanStatus:
                    - 'CLEAN'
                  s3:ExistingObjectTag/contentsPreviouslyScanned:
                    - 'TRUE'
                  aws:PrincipalArn: !GetAtt IamRoleLambdaExecution.Arn
            - Action: 's3:PutObject'
              Effect: Deny
              Principal: '*'
              NotResource:
                - !Sub ${DocumentUploadsBucket.Arn}/*.csv
                - !Sub ${DocumentUploadsBucket.Arn}/*.doc
                - !Sub ${DocumentUploadsBucket.Arn}/*.docx
                - !Sub ${DocumentUploadsBucket.Arn}/*.pdf
                - !Sub ${DocumentUploadsBucket.Arn}/*.txt
                - !Sub ${DocumentUploadsBucket.Arn}/*.xls
                - !Sub ${DocumentUploadsBucket.Arn}/*.xlsx
                - !Sub ${DocumentUploadsBucket.Arn}/*.zip
                - !Sub ${DocumentUploadsBucket.Arn}/*.xlsm
                - !Sub ${DocumentUploadsBucket.Arn}/*.xltm
                - !Sub ${DocumentUploadsBucket.Arn}/*.xlam
            - Effect: Deny
              Action: 's3:*'
              Principal: '*'
              Condition:
                Bool:
                  'aws:SecureTransport': false
              Resource:
                - !Sub ${DocumentUploadsBucket.Arn}
                - !Sub ${DocumentUploadsBucket.Arn}/*
              Sid: DenyUnencryptedConnections

    LambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt AvScanLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceAccount: !Sub ${AWS::AccountId}
        SourceArn: !Sub arn:aws:s3:::${self:service}-${sls:stage}-uploads-${AWS::AccountId}

    ClamDefsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${self:service}-${sls:stage}-avscan-${AWS::AccountId}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        AccessControl: Private
    ClamsDefsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ClamDefsBucket
        PolicyDocument:
          Statement:
            - Effect: Deny
              Action: 's3:*'
              Principal: '*'
              Condition:
                Bool:
                  'aws:SecureTransport': false
              Resource:
                - !Sub ${ClamDefsBucket.Arn}
                - !Sub ${ClamDefsBucket.Arn}/*
              Sid: DenyUnencryptedConnections

  Outputs:
    DocumentUploadsBucketName:
      Value: !Ref DocumentUploadsBucket
    DocumentUploadsBucketArn:
      Value: !GetAtt DocumentUploadsBucket.Arn
    Region:
      Value: !Sub ${AWS::Region}
