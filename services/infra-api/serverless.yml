service: infra-api
variablesResolutionMode: 20210326

frameworkVersion: '2'

plugins:
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper
  - serverless-iam-helper

custom:
  stage: ${opt:stage, self:provider.stage}
  # iamPermissionsBoundaryPolicy: ${env:FULL_IAM_PERMISSIONS_BOUNDARY_POLICY, ""}
  # iamPath: ${env:IAM_PATH, "/"}
  serverlessTerminationProtection:
    stages:
      - dev
      - val
      - prod
      - main

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1

resources:
  Mappings:
    DatacenterMap:
      NewRelicDatacenter:
        US: 'https://aws-api.newrelic.com/cloudwatch-metrics/v1'
        EU: 'https://aws-api.eu01.nr-data.net/cloudwatch-metrics/v1'

  Metadata:
    AWS::CloudFormation::Interface:
      ParameterGroups:
        - Label:
            default: 'Metric Stream Configuration'
          Parameters:
            - NewRelicLicenseKey
            - NewRelicDatacenter
            - CloudWatchMetricStreamName
            - FirehoseStreamName
            - S3BackupBucketName
        - Label:
            default: 'AWS Config Service Configuration (Optional)'
          Parameters:
            - CreateConfigService
            - S3ConfigBucketName
      ParameterLabels:
        CloudWatchMetricStreamName:
          default: 'CloudWatch Metric Stream name'
        FirehoseStreamName:
          default: 'Kinesis Data Firehose name'
        NewRelicDatacenter:
          default: 'New Relic Datacenter'
        NewRelicLicenseKey:
          default: 'New Relic Ingest License Key'
        S3BackupBucketName:
          default: 'Firehose S3 backup bucket name'
        CreateConfigService:
          default: 'Enrich metrics with resource metadata from AWS Config?'
        S3ConfigBucketName:
          default: 'Config S3 backup bucket name'

  Conditions:
    ShouldCreateConfig: !Equals [true, !Ref CreateConfigService]

  Resources:
    AppApiGateway:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-${self:custom.stage}-app-api-gateway

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref AppApiGateway
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref AppApiGateway

    S3FirehoseEventsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName:
          !Join [
            '-',
            [
              !Ref S3BackupBucketName,
              !Select [
                0,
                !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]],
              ],
            ],
          ]
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    FirehoseStreamToNewRelic:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: !Ref FirehoseStreamName
        DeliveryStreamType: DirectPut
        HttpEndpointDestinationConfiguration:
          RequestConfiguration:
            ContentEncoding: GZIP
          EndpointConfiguration:
            Name: New Relic
            Url:
              !FindInMap [
                DatacenterMap,
                NewRelicDatacenter,
                !Ref NewRelicDatacenter,
              ]
            AccessKey: !Ref NewRelicLicenseKey
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 1
          RetryOptions:
            DurationInSeconds: 60
          S3Configuration:
            CompressionFormat: GZIP
            BucketARN: !GetAtt S3FirehoseEventsBucket.Arn
            RoleARN: !GetAtt FirehoseRole.Arn
          RoleARN: !GetAtt FirehoseRole.Arn

    MetricStreamRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - streams.metrics.cloudwatch.amazonaws.com
              Action:
                - 'sts:AssumeRole'
              Condition:
                StringEquals:
                  'sts:ExternalId': !Ref AWS::AccountId
        Path: /service-role/
        Policies:
          - PolicyName: MetricStreams-FirehosePutRecords
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 'firehose:PutRecord'
                    - 'firehose:PutRecordBatch'
                  Resource: !GetAtt FirehoseStreamToNewRelic.Arn
        Description: Role to allow a metric stream put metrics into a firehose
        RoleName:
          !Join [
            '-',
            [
              'MetricsStreamRole',
              !Select [
                0,
                !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]],
              ],
            ],
          ]

    FirehoseRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - firehose.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /service-role/
        Policies:
          - PolicyName: Firehose-S3Access
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 's3:AbortMultipartUpload'
                    - 's3:GetBucketLocation'
                    - 's3:GetObject'
                    - 's3:ListBucket'
                    - 's3:ListBucketMultipartUploads'
                    - 's3:PutObject'
                  Resource:
                    - !GetAtt S3FirehoseEventsBucket.Arn
                    - !Join ['', [!GetAtt S3FirehoseEventsBucket.Arn, '/*']]
        Description: Role to allow firehose stream put events into S3 backup bucket
        RoleName:
          !Join [
            '-',
            [
              'FirehoseRole',
              !Select [
                0,
                !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]],
              ],
            ],
          ]

    CloudWatchMetricStream:
      Type: AWS::CloudWatch::MetricStream
      Properties:
        Name: !Ref CloudWatchMetricStreamName
        FirehoseArn: !GetAtt FirehoseStreamToNewRelic.Arn
        RoleArn: !GetAtt MetricStreamRole.Arn
        OutputFormat: 'opentelemetry0.7'

    ConfigurationRecorder:
      Type: AWS::Config::ConfigurationRecorder
      Condition: ShouldCreateConfig
      Properties:
        RecordingGroup:
          AllSupported: true
        RoleARN: !GetAtt ConfigRole.Arn

    DeliveryChannel:
      Type: AWS::Config::DeliveryChannel
      Condition: ShouldCreateConfig
      Properties:
        S3BucketName:
          !Join [
            '-',
            [
              !Ref S3ConfigBucketName,
              !Select [
                0,
                !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]],
              ],
            ],
          ]

    ConfigS3Bucket:
      Type: AWS::S3::Bucket
      Condition: ShouldCreateConfig
      Properties:
        BucketName:
          !Join [
            '-',
            [
              !Ref S3ConfigBucketName,
              !Select [
                0,
                !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]],
              ],
            ],
          ]
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    ConfigRole:
      Type: AWS::IAM::Role
      Condition: ShouldCreateConfig
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - config.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /service-role/
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSConfigRole
        Policies:
          - PolicyName: ConfigService-S3Access
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 's3:PutObject'
                    - 's3:PutObjectAcl'
                  Resource:
                    !Join [
                      '',
                      [
                        'arn:aws:s3:::',
                        !Ref ConfigS3Bucket,
                        '/AWSLogs/',
                        !Ref AWS::AccountId,
                        '/*',
                      ],
                    ]
        Description: Role to allow Config Service communicate with Delivery Channel
        RoleName:
          !Join [
            '-',
            [
              'ConfigRole',
              !Select [
                0,
                !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]],
              ],
            ],
          ]

  Parameters:
    NewRelicLicenseKey:
      Type: String
      Description: 40-character hexadecimal string
      NoEcho: true
    NewRelicDatacenter:
      Type: String
      Description: EU keys are prefixed with eu0x, US otherwise
      Default: US
      AllowedValues: [US, EU]
    FirehoseStreamName:
      Type: String
      Default: NewRelic-Delivery-Stream
      MaxLength: 30
    CloudWatchMetricStreamName:
      Type: String
      Default: NewRelic-Metric-Stream
      MaxLength: 30
    S3BackupBucketName:
      Type: String
      Description: Destination for failed events (lowercase)
      MaxLength: 55
      Default: firehose-backup
    CreateConfigService:
      Type: String
      Description: Enable and configure AWS Config to track resource changes
      Default: false
      AllowedValues: [true, false]
    S3ConfigBucketName:
      Type: String
      Description: Destination for delivery channel (lowercase)
      MaxLength: 55
      Default: config-backup

    # AppApiGatewayAcl:
    #   Type: AWS::WAFv2::WebACL
    #   Properties:
    #     DefaultAction:
    #       Block: {}
    #     Rules:
    #       - Action:
    #           Allow: {}
    #         Name: ${self:custom.stage}-allow-usa-plus-territories
    #         Priority: 0
    #         Statement:
    #           GeoMatchStatement:
    #             CountryCodes:
    #               - GU # Guam
    #               - PR # Puerto Rico
    #               - US # USA
    #               - UM # US Minor Outlying Islands
    #               - VI # US Virgin Islands
    #               - MP # Northern Mariana Islands
    #         VisibilityConfig:
    #           SampledRequestsEnabled: true
    #           CloudWatchMetricsEnabled: true
    #           MetricName: WafWebAcl
    #     Scope: REGIONAL
    #     VisibilityConfig:
    #       CloudWatchMetricsEnabled: true
    #       SampledRequestsEnabled: true
    #       MetricName: ${self:custom.stage}-webacl

    # ApiGwWebAclAssociation:
    #   Type: AWS::WAFv2::WebACLAssociation
    #   DependsOn:
    #     - AppApiGateway
    #     - AppApiGatewayAcl
    #   Properties:
    #     ResourceArn: !Sub
    #       - arn:aws:apigateway:${self:provider.region}::/restapis/${GatewayRef}/stages/${self:custom.stage}
    #       - { GatewayRef: !Ref AppApiGateway }
    #     WebACLArn: !GetAtt AppApiGatewayAcl.Arn

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: AppApiGateway
    ApiGatewayRestApiUrl:
      Value: !Sub https://${AppApiGateway}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    AppApiGatewayRootResourceId:
      Value:
        Fn::GetAtt:
          - AppApiGateway
          - RootResourceId
