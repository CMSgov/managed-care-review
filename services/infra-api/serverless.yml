service: infra-api
variablesResolutionMode: 20210326

frameworkVersion: '^3.19.0'

plugins:
  - serverless-offline-ssm
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper
  - serverless-iam-helper

custom:
  stage: ${opt:stage, self:provider.stage}
  nrLicenseKey: ${ssm:/configuration/nr_license_key}
  nrMetricStreamName: 'NewRelic-Metric-Stream'
  nrFirehoseStreamName: 'NewRelic-Delivery-Stream'
  nrExternalId: '3407984'
  webAclName: ${self:custom.stage}-${self:service}-webacl
  serverless-offline-ssm:
    stages:
      - local
      - offline
    ssm:
      '/configuration/iam/full_permissions_boundary_policy': 'arn:aws:iam::local:policy/local/developer-boundary-policy'
  serverlessTerminationProtection:
    stages:
      - dev
      - val
      - prod
      - main

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  iam:
    role:
      path: ${ssm:/configuration/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/iam/full_permissions_boundary_policy}
      statements:
        - Effect: 'Allow'
          Action:
            - '*'
          Resource: !GetAtt FirehoseStreamToNewRelic.Arn

resources:
  Conditions:
    CreateNRInfraMonitoring:
      Fn::Or:
        - Fn::Equals:
            - ${sls:stage}
            - 'dev'
        - Fn::Equals:
            - ${sls:stage}
            - 'val'
        - Fn::Equals:
            - ${sls:stage}
            - 'prod'
        - Fn::Equals:
            - ${sls:stage}
            - 'main'
  Resources:
    AppApiGateway:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-${sls:stage}-app-api-gateway

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref AppApiGateway
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref AppApiGateway

    CMSWafAcl:
      Type: 'AWS::WAFv2::WebACL'
      DependsOn: 'WafIPRuleSet'
      Properties:
        Name: ${sls:stage}-infra-api-webacl
        DefaultAction:
          Block: {}
        Scope: REGIONAL
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          SampledRequestsEnabled: true
          MetricName: ${sls:stage}-infra-api-webacl-webacl
        Rules:
          - Name: ${sls:stage}-infra-api-webacl-DDOSRateLimitRule
            Priority: 0
            Action:
              Block: {}
            Statement:
              RateBasedStatement:
                Limit: 5000
                AggregateKeyType: IP
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: ${sls:stage}-infra-api-webacl-DDOSRateLimitRuleMetric
          - Name: ${sls:stage}-infra-api-webacl-AWSCommonRule
            Priority: 1
            OverrideAction:
              None: {}
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesCommonRuleSet
                ExcludedRules: []
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: ${sls:stage}-infra-api-webacl-AWSCommonRuleMetric
          - Name: ${sls:stage}-infra-api-webacl-AWSManagedRulesAmazonIpReputationList
            Priority: 2
            OverrideAction:
              None: {}
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesAmazonIpReputationList
                ExcludedRules: []
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: >-
                ${sls:stage}-infra-api-webacl-AWSManagedRulesAmazonIpReputationListMetric
          - Name: ${sls:stage}-infra-api-webacl-AWSManagedRulesKnownBadInputsRuleSet
            Priority: 3
            OverrideAction:
              None: {}
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesKnownBadInputsRuleSet
                ExcludedRules: []
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: >-
                ${sls:stage}-infra-api-webacl-AWSManagedRulesKnownBadInputsRuleSetMetric
          - Name: ${sls:stage}-infra-api-webacl-allow-usa-plus-territories
            Priority: 5
            Action:
              Allow: {}
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU
                  - PR
                  - US
                  - UM
                  - VI
                  - MP
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: ${sls:stage}-infra-api-webacl-allow-usa-plus-territories-metric
          - Name: ${sls:stage}-infra-api-webacl-allow-ips
            Priority: 6
            Action:
              Allow: {}
            Statement:
              IPSetReferenceStatement:
                Arn: !GetAtt WafIPRuleSet.Arn

    WafIPRuleSet:
      Type: AWS::WAFv2::IPSet
      DependsOn: AppApiGateway
      Properties:
        Addresses:
          - 172.160.0.0/11
        Description: 'An allowlist for IP addresses to access our application'
        IPAddressVersion: IPV4
        Name: gha-allow-list-${sls:stage}
        Scope: REGIONAL

    # NewRelic exporting configs
    NewRelicInfraIntegrations:
      Type: AWS::IAM::Role
      Condition: CreateNRInfraMonitoring
      Properties:
        RoleName: NewRelicInfraIntegrations
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - 'arn:aws:iam::754728514883:root'
              Action:
                - 'sts:AssumeRole'
              Condition:
                StringEquals:
                  'sts:ExternalId': !Sub ${self:custom.nrExternalId}
        Policies:
          - PolicyName: NewRelicBudget
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'budget:ViewBudge'
                  Resource: '*'
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/ReadOnlyAccess'

    S3FirehoseEventsBucket:
      Type: AWS::S3::Bucket
      Condition: CreateNRInfraMonitoring
      Properties:
        BucketName: !Sub newrelic-firehose-${sls:stage}-${AWS::AccountId}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256

    FirehoseStreamToNewRelic:
      Type: AWS::KinesisFirehose::DeliveryStream
      Condition: CreateNRInfraMonitoring
      Properties:
        DeliveryStreamName: ${self:custom.nrFirehoseStreamName}
        DeliveryStreamType: DirectPut
        HttpEndpointDestinationConfiguration:
          RequestConfiguration:
            ContentEncoding: GZIP
          EndpointConfiguration:
            Name: New Relic
            Url: 'https://aws-api.newrelic.com/cloudwatch-metrics/v1'
            AccessKey: ${self:custom.nrLicenseKey}
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 1
          RetryOptions:
            DurationInSeconds: 60
          S3Configuration:
            CompressionFormat: GZIP
            BucketARN: !GetAtt S3FirehoseEventsBucket.Arn
            RoleARN: !GetAtt FirehoseRole.Arn
          RoleARN: !GetAtt FirehoseRole.Arn

    MetricStreamRole:
      Type: AWS::IAM::Role
      Condition: CreateNRInfraMonitoring
      Properties:
        RoleName: NewRelicInfraMetricStreamRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - streams.metrics.cloudwatch.amazonaws.com
              Action:
                - 'sts:AssumeRole'
              Condition:
                StringEquals:
                  'sts:ExternalId': !Sub ${AWS::AccountId}
        Policies:
          - PolicyName: MetricStreams-FirehosePutRecords
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'firehose:PutRecord'
                    - 'firehose:PutRecordBatch'
                  Resource: !GetAtt FirehoseStreamToNewRelic.Arn
        Description: Role to allow a metric stream put metrics into a firehose

    FirehoseRole:
      Type: AWS::IAM::Role
      Condition: CreateNRInfraMonitoring
      Properties:
        RoleName: NewRelicInfraFirehoseRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - firehose.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: Firehose-S3Access
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 's3:AbortMultipartUpload'
                    - 's3:GetBucketLocation'
                    - 's3:GetObject'
                    - 's3:ListBucket'
                    - 's3:ListBucketMultipartUploads'
                    - 's3:PutObject'
                  Resource:
                    - !GetAtt S3FirehoseEventsBucket.Arn
                    - !Join ['', [!GetAtt S3FirehoseEventsBucket.Arn, '/*']]
        Description: Role to allow firehose stream put events into S3 backup bucket

    CloudWatchMetricStream:
      Type: AWS::CloudWatch::MetricStream
      Condition: CreateNRInfraMonitoring
      Properties:
        Name: ${self:custom.nrMetricStreamName}
        FirehoseArn: !GetAtt FirehoseStreamToNewRelic.Arn
        RoleArn: !GetAtt MetricStreamRole.Arn
        OutputFormat: 'opentelemetry0.7'

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: AppApiGateway
    ApiGatewayRestApiUrl:
      Value: !Sub https://${AppApiGateway}.execute-api.${self:provider.region}.amazonaws.com/${sls:stage}
    AppApiGatewayRootResourceId:
      Value:
        Fn::GetAtt:
          - AppApiGateway
          - RootResourceId
    WafPluginAclArn:
      Value:
        Fn::GetAtt:
          - CMSWafAcl
          - Arn
