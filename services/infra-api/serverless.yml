service: infra-api
variablesResolutionMode: 20210326

frameworkVersion: '2'

plugins:
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper
  - serverless-iam-helper

custom:
  stage: ${opt:stage, self:provider.stage}
  iamPermissionsBoundaryPolicy: ${env:FULL_IAM_PERMISSIONS_BOUNDARY_POLICY, ""}
  iamPath: ${env:IAM_PATH, "/"}
  nrLicenseKey: ${env:NR_LICENSE_KEY}
  nrMetricStreamName: 'NewRelic-Metric-Stream'
  nrFirehoseStreamName: 'NewRelic-Delivery-Stream'
  serverlessTerminationProtection:
    stages:
      - dev
      - val
      - prod
      - main

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1

resources:
  Resources:
    AppApiGateway:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-${self:custom.stage}-app-api-gateway

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref AppApiGateway
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref AppApiGateway

    S3FirehoseEventsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub newrelic-firehose-${self:custom.stage}-${AWS::AccountID}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    FirehoseStreamToNewRelic:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: ${self:custom.nrFirehoseStreamName}
        DeliveryStreamType: DirectPut
        HttpEndpointDestinationConfiguration:
          RequestConfiguration:
            ContentEncoding: GZIP
          EndpointConfiguration:
            Name: New Relic
            Url: 'https://aws-api.newrelic.com/cloudwatch-metrics/v1'
            AccessKey: ${self:custom.nrLicenseKey}
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 1
          RetryOptions:
            DurationInSeconds: 60
          S3Configuration:
            CompressionFormat: GZIP
            BucketARN: !GetAtt S3FirehoseEventsBucket.Arn
            RoleARN: !GetAtt FirehoseRole.Arn
          RoleARN: !GetAtt FirehoseRole.Arn

    MetricStreamRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - streams.metrics.cloudwatch.amazonaws.com
              Action:
                - 'sts:AssumeRole'
              Condition:
                StringEquals:
                  'sts:ExternalId': ${AWS::AccountId}
        Path: /service-role/
        Policies:
          - PolicyName: MetricStreams-FirehosePutRecords
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 'firehose:PutRecord'
                    - 'firehose:PutRecordBatch'
                  Resource: !GetAtt FirehoseStreamToNewRelic.Arn
        Description: Role to allow a metric stream put metrics into a firehose
        RoleName:
          !Join [
            '-',
            [
              'MetricsStreamRole',
              !Select [
                0,
                !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]],
              ],
            ],
          ]

    FirehoseRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - firehose.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /service-role/
        Policies:
          - PolicyName: Firehose-S3Access
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 's3:AbortMultipartUpload'
                    - 's3:GetBucketLocation'
                    - 's3:GetObject'
                    - 's3:ListBucket'
                    - 's3:ListBucketMultipartUploads'
                    - 's3:PutObject'
                  Resource:
                    - !GetAtt S3FirehoseEventsBucket.Arn
                    - !Join ['', [!GetAtt S3FirehoseEventsBucket.Arn, '/*']]
        Description: Role to allow firehose stream put events into S3 backup bucket
        RoleName:
          !Join [
            '-',
            [
              'FirehoseRole',
              !Select [
                0,
                !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]],
              ],
            ],
          ]

    CloudWatchMetricStream:
      Type: AWS::CloudWatch::MetricStream
      Properties:
        Name: ${self:custom.nrMetricStreamName}
        FirehoseArn: !GetAtt FirehoseStreamToNewRelic.Arn
        RoleArn: !GetAtt MetricStreamRole.Arn
        OutputFormat: 'opentelemetry0.7'

    # AppApiGatewayAcl:
    #   Type: AWS::WAFv2::WebACL
    #   Properties:
    #     DefaultAction:
    #       Block: {}
    #     Rules:
    #       - Action:
    #           Allow: {}
    #         Name: ${self:custom.stage}-allow-usa-plus-territories
    #         Priority: 0
    #         Statement:
    #           GeoMatchStatement:
    #             CountryCodes:
    #               - GU # Guam
    #               - PR # Puerto Rico
    #               - US # USA
    #               - UM # US Minor Outlying Islands
    #               - VI # US Virgin Islands
    #               - MP # Northern Mariana Islands
    #         VisibilityConfig:
    #           SampledRequestsEnabled: true
    #           CloudWatchMetricsEnabled: true
    #           MetricName: WafWebAcl
    #     Scope: REGIONAL
    #     VisibilityConfig:
    #       CloudWatchMetricsEnabled: true
    #       SampledRequestsEnabled: true
    #       MetricName: ${self:custom.stage}-webacl

    # ApiGwWebAclAssociation:
    #   Type: AWS::WAFv2::WebACLAssociation
    #   DependsOn:
    #     - AppApiGateway
    #     - AppApiGatewayAcl
    #   Properties:
    #     ResourceArn: !Sub
    #       - arn:aws:apigateway:${self:provider.region}::/restapis/${GatewayRef}/stages/${self:custom.stage}
    #       - { GatewayRef: !Ref AppApiGateway }
    #     WebACLArn: !GetAtt AppApiGatewayAcl.Arn

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: AppApiGateway
    ApiGatewayRestApiUrl:
      Value: !Sub https://${AppApiGateway}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    AppApiGatewayRootResourceId:
      Value:
        Fn::GetAtt:
          - AppApiGateway
          - RootResourceId
