mutation approveContract($input: ApproveContractInput!) {
    approveContract(input: $input) {
        contract {
            ...contractFieldsFragment

            draftRevision {
                ...contractRevisionFragmentForFetch
            }

            draftRates {
                ...rateFields

                draftRevision {
                    ...rateRevisionFragmentForFetchContract
                }

                revisions {
                    ...rateRevisionFragmentForFetchContract
                }
            }

            packageSubmissions {
                ...packageSubmissionsFragmentForFetch
            }
        }
    }
}

fragment rateFields on Rate {
    id
    createdAt
    updatedAt
    stateCode
    stateNumber
    parentContractID
    state {
        code
        name
        programs {
            id
            name
            fullName
            isRateProgram
        }
    }
    status
    parentContractID
    initiallySubmittedAt
}

fragment rateRevisionFragmentForFetchContract on RateRevision {
    id
    rateID
    createdAt
    updatedAt
    unlockInfo {
        ...updateInformationFields
    }
    submitInfo {
        ...updateInformationFields
    }
    formData {
        rateType
        rateCapitationType
        rateDocuments {
            name
            s3URL
            sha256
            dateAdded
            downloadURL
        }
        supportingDocuments {
            name
            s3URL
            sha256
            dateAdded
            downloadURL
        }
        rateDateStart
        rateDateEnd
        rateDateCertified
        amendmentEffectiveDateStart
        amendmentEffectiveDateEnd
        rateProgramIDs
        deprecatedRateProgramIDs
        rateCertificationName
        certifyingActuaryContacts {
            id
            name
            titleRole
            email
            actuarialFirm
            actuarialFirmOther
        }
        addtlActuaryContacts {
            id
            name
            titleRole
            email
            actuarialFirm
            actuarialFirmOther
        }
        actuaryCommunicationPreference
        packagesWithSharedRateCerts {
            packageName
            packageId
            packageStatus
        }
    }
}

fragment contractFormDataFragmentForFetch on ContractFormData {
    programIDs

    populationCovered
    submissionType

    riskBasedContract
    submissionDescription

    stateContacts {
        name
        titleRole
        email
    }

    supportingDocuments {
        name
        s3URL
        sha256
        dateAdded
        downloadURL
    }

    contractType
    contractExecutionStatus
    contractDocuments {
        name
        s3URL
        sha256
        dateAdded
        downloadURL
    }

    contractDateStart
    contractDateEnd
    managedCareEntities
    federalAuthorities
    inLieuServicesAndSettings
    modifiedBenefitsProvided
    modifiedGeoAreaServed
    modifiedMedicaidBeneficiaries
    modifiedRiskSharingStrategy
    modifiedIncentiveArrangements
    modifiedWitholdAgreements
    modifiedStateDirectedPayments
    modifiedPassThroughPayments
    modifiedPaymentsForMentalDiseaseInstitutions
    modifiedMedicaidBeneficiaries
    modifiedMedicalLossRatioStandards
    modifiedOtherFinancialPaymentIncentive
    modifiedEnrollmentProcess
    modifiedGrevienceAndAppeal
    modifiedNetworkAdequacyStandards
    modifiedLengthOfContract
    modifiedNonRiskPaymentArrangements
    statutoryRegulatoryAttestation
    statutoryRegulatoryAttestationDescription
}

fragment contractRevisionFragmentForFetch on ContractRevision {
    id
    createdAt
    updatedAt
    contractID
    contractName

    submitInfo {
        ...updateInformationFields
    }

    unlockInfo {
        ...updateInformationFields
    }

    formData {
        ...contractFormDataFragmentForFetch
    }
}

fragment packageSubmissionsFragmentForFetch on ContractPackageSubmission {
    cause
    submitInfo {
        ...updateInformationFields
    }

    submittedRevisions {
        ...submittableRevisionsFieldsForFetch
    }

    contractRevision {
        ...contractRevisionFragmentForFetch
    }
    rateRevisions {
        ...rateRevisionFragmentForFetchContract
        rate {
            ...rateFields
            revisions {
                ...rateRevisionFragmentForFetchContract
            }
        }
    }
}

fragment submittableRevisionsFieldsForFetch on SubmittableRevision {
    ... on ContractRevision {
        ...contractRevisionFragmentForFetch
    }
    ... on RateRevision {
        ...rateRevisionFragmentForFetchContract
    }
}
