schema {
    query: Query
    mutation: Mutation
}

type Query {
    fetchCurrentUser: User!
    fetchDraftSubmission(
        input: FetchDraftSubmissionInput!
    ): FetchDraftSubmissionPayload!
    fetchStateSubmission(
        input: FetchStateSubmissionInput!
    ): FetchStateSubmissionPayload!
}

type Mutation {
    createDraftSubmission(
        input: CreateDraftSubmissionInput!
    ): CreateDraftSubmissionPayload!
    updateDraftSubmission(
        input: UpdateDraftSubmissionInput!
    ): UpdateDraftSubmissionPayload!
    submitDraftSubmission(
        input: SubmitDraftSubmissionInput!
    ): SubmitDraftSubmissionPayload!
}

input CreateDraftSubmissionInput {
    programID: ID!
    submissionType: SubmissionType!
    submissionDescription: String!
}

type CreateDraftSubmissionPayload {
    draftSubmission: DraftSubmission!
}

input FetchDraftSubmissionInput {
    submissionID: ID!
}

type FetchDraftSubmissionPayload {
    draftSubmission: DraftSubmission
}

input FetchStateSubmissionInput {
    submissionID: ID!
}

type FetchStateSubmissionPayload {
    submission: StateSubmission
}

input UpdateDraftSubmissionInput {
    submissionID: ID!
    draftSubmissionUpdates: DraftSubmissionUpdates!
}

type UpdateDraftSubmissionPayload {
    draftSubmission: DraftSubmission!
}

input SubmitDraftSubmissionInput {
    submissionID: ID!
}

type SubmitDraftSubmissionPayload {
    submission: StateSubmission!
}
scalar Date
scalar DateTime

type User {
    role: String!
    email: String!
    state: State!
    name: String!
}

type State {
    code: String!
    name: String!
    programs: [Program!]!
}

type Program {
    id: ID!
    name: String!
}

type Document {
    name: String!
    s3URL: String!
}

input DocumentInput {
    name: String!
    s3URL: String!
}

type CapitationRatesAmendedInfo {
    reason: CapitationRatesAmendmentReason
    otherReason: String
}

input CapitationRatesAmendedInfoInput {
    reason: CapitationRatesAmendmentReason
    otherReason: String
}

type ContractAmendmentInfo {
    itemsBeingAmended: [String!]!
    otherItemBeingAmended: String
    capitationRatesAmendedInfo: CapitationRatesAmendedInfo
    relatedToCovid19: Boolean
    relatedToVaccination: Boolean
}

input ContractAmendmentInfoInput {
    itemsBeingAmended: [String!]!
    otherItemBeingAmended: String
    capitationRatesAmendedInfo: CapitationRatesAmendedInfoInput
    relatedToCovid19: Boolean
    relatedToVaccination: Boolean
}

enum CapitationRatesAmendmentReason {
    ANNUAL
    MIDYEAR
    OTHER
}

enum SubmissionType {
    CONTRACT_ONLY
    CONTRACT_AND_RATES
}

enum ContractType {
    BASE
    AMENDMENT
}

enum FederalAuthority {
    STATE_PLAN
    WAIVER_1915B
    WAIVER_1115
    VOLUNTARY
    BENCHMARK
    TITLE_XXI
}

type DraftSubmission {
    id: ID!
    programID: String!
    program: Program!
    submissionType: SubmissionType!
    submissionDescription: String!
    stateCode: String!
    name: String!
    createdAt: Date!
    updatedAt: DateTime!
    documents: [Document!]!
    contractType: ContractType
    contractDateStart: Date
    contractDateEnd: Date
    managedCareEntities: [String!]!
    federalAuthorities: [FederalAuthority!]!
    contractAmendmentInfo: ContractAmendmentInfo
}

type StateSubmission {
    id: ID!
    programID: String!
    program: Program!
    submissionType: SubmissionType!
    submissionDescription: String!
    stateCode: String!
    name: String!
    createdAt: Date!
    updatedAt: DateTime!
    documents: [Document!]!
    contractAmendmentInfo: ContractAmendmentInfo
    submittedAt: Date!
    contractType: ContractType!
    contractDateStart: Date!
    contractDateEnd: Date!
    managedCareEntities: [String!]!
    federalAuthorities: [FederalAuthority!]!
}

input DraftSubmissionUpdates {
    programID: String!
    submissionType: SubmissionType!
    submissionDescription: String!
    documents: [DocumentInput!]!
    contractType: ContractType
    contractDateStart: Date
    contractDateEnd: Date
    managedCareEntities: [String!]!
    federalAuthorities: [FederalAuthority!]!
    contractAmendmentInfo: ContractAmendmentInfoInput
}
