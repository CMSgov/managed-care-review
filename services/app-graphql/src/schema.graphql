schema {
    query: Query
    mutation: Mutation
}

type Query {
    fetchCurrentUser: User!
    fetchHealthPlanPackage(
        input: FetchHealthPlanPackageInput!
    ): FetchHealthPlanPackagePayload!
    indexHealthPlanPackages: IndexHealthPlanPackagesPayload!
}

type Mutation {
    createHealthPlanPackage(
        input: CreateHealthPlanPackageInput!
    ): CreateHealthPlanPackagePayload!
    updateHealthPlanFormData(
        input: UpdateHealthPlanFormDataInput!
    ): UpdateHealthPlanFormDataPayload!

    unlockHealthPlanPackage(
        input: UnlockHealthPlanPackageInput!
    ): UnlockHealthPlanPackagePayload!
    submitHealthPlanPackage(
        input: SubmitHealthPlanPackageInput!
    ): SubmitHealthPlanPackagePayload!
}

input CreateHealthPlanPackageInput {
    programIDs: [ID!]!
    riskBasedContract: Boolean
    submissionType: SubmissionType!
    submissionDescription: String!
    contractType: ContractType!
}

type CreateHealthPlanPackagePayload {
    pkg: HealthPlanPackage!
}

input FetchHealthPlanPackageInput {
    pkgID: ID!
}

type FetchHealthPlanPackagePayload {
    pkg: HealthPlanPackage
}

type HealthPlanPackageEdge {
    node: HealthPlanPackage!
}

type IndexHealthPlanPackagesPayload {
    totalCount: Int
    edges: [HealthPlanPackageEdge!]!
}

input SubmitHealthPlanPackageInput {
    pkgID: ID!
    submittedReason: String
}

type SubmitHealthPlanPackagePayload {
    pkg: HealthPlanPackage!
}

input UnlockHealthPlanPackageInput {
    pkgID: ID!
    unlockedReason: String!
}

type UnlockHealthPlanPackagePayload {
    pkg: HealthPlanPackage!
}

input UpdateHealthPlanFormDataInput {
    pkgID: ID!
    healthPlanFormData: String!
}

type UpdateHealthPlanFormDataPayload {
    pkg: HealthPlanPackage!
}

scalar Date
scalar DateTime

union User = StateUser | CMSUser

type StateUser {
    role: String!
    email: String!
    state: State!
    name: String!
}

type CMSUser {
    role: String!
    email: String!
    name: String!
}

type State {
    code: String!
    name: String!
    programs: [Program!]!
}

type Program {
    id: ID!
    name: String!
    fullName: String!
}

enum HealthPlanPackageStatus {
    DRAFT
    SUBMITTED
    UNLOCKED
    RESUBMITTED
}

type HealthPlanPackage {
    id: ID!
    status: HealthPlanPackageStatus!
    initiallySubmittedAt: Date
    stateCode: String!
    state: State!
    revisions: [HealthPlanRevisionEdge!]!
}

type UpdateInformation {
    updatedAt: DateTime!
    updatedBy: String!
    updatedReason: String!
}

type HealthPlanRevision {
    id: ID!
    unlockInfo: UpdateInformation
    submitInfo: UpdateInformation
    createdAt: DateTime!
    formDataProto: String!
}

type HealthPlanRevisionEdge {
    node: HealthPlanRevision!
}

enum SubmissionType {
    CONTRACT_ONLY
    CONTRACT_AND_RATES
}

enum ContractType {
    BASE
    AMENDMENT
}
