service: rerundependabot
variablesResolutionMode: 20210326

frameworkVersion: '2'

plugins:
  - serverless-plugin-scripts
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper
  - serverless-iam-helper

provider:
  name: aws
  runtime: python3.7
  region: us-east-1
  iam:
    role:
      path: ${self:custom.iamPath}
      permissionsBoundary: ${self:custom.iamPermissionsBoundaryPolicy}

custom:
  stage: ${opt:stage, self:provider.stage}
  iamPath: ${env:IAM_PATH, "/"}
  iamPermissionsBoundaryPolicy: ${env:FULL_IAM_PERMISSIONS_BOUNDARY_POLICY, ""}
  serverlessTerminationProtection:
    stages:
      - dev
      - val
      - prod
      - main
  scripts:
    hooks:
      # curl down the artifacts for deployment
      package:initialize: |
        echo "Curling Down lambda-dependabot"
        curl -L https://github.com/trussworks/lambda-dependabot/releases/download/v0.0.1/lambda-dependabot.zip --output lambda-dependabot.zip
        curl -L https://github.com/trussworks/lambda-dependabot/releases/download/v0.0.1/pygh-layer.zip --output pygh-layer.zip

package:
  individually: true

layers:
  pygithub:
    package:
      artifact: pygh-layer.zip

functions:
  rerun-dependabot:
    runtime: python3.8
    handler: lambda_function.lambda_handler
    layers:
      - { Ref: PygithubLambdaLayer }
    events:
      - schedule:
          name: re-run-dependabot-event
          description: 'time to check if there are dependabot prs to retry'
          rate: rate(20 minutes)
    description: Reruns dependabot github actions that fail for lack of secrets access
    timeout: 30
    environment:
      FOO: bar
    package:
      artifact: lambda-dependabot.zip
