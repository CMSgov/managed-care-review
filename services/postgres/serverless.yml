service: postgres

frameworkVersion: '^3.19.0'

plugins:
  - serverless-offline-ssm
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper
  - serverless-iam-helper
  - serverless-scriptable-plugin

provider:
  name: aws
  runtime: python3.7
  region: us-east-1
  iam:
    role:
      path: ${ssm:/configuration/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/iam/full_permissions_boundary_policy}
      statements:
        - Effect: 'Allow'
          Action:
            - secretsmanager:DescribeSecret # pragma: allowlist secret
            - secretsmanager:GetSecretValue # pragma: allowlist secret
            - secretsmanager:PutSecretValue # pragma: allowlist secret
            - secretsmanager:UpdateSecretVersionStage # pragma: allowlist secret
          Resource: '*'
          Condition:
            StringEquals:
              'secretsmanager:resource/AllowRotationLambdaArn': '${self:custom.rotatorArn}' # pragma: allowlist secret
        - Effect: Allow
          Action:
            - secretsmanager:GetRandomPassword # pragma: allowlist secret
          Resource: '*'
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeNetworkInterfaces
          Resource: '*'

custom:
  stage: ${opt:stage, self:provider.stage}
  databaseName: !Sub aurora_${self:service}_${sls:stage}_${AWS::AccountId}
  vpcId: ${ssm:/configuration/${sls:stage}/vpc/id, ssm:/configuration/default/vpc/id}
  sgId: ${ssm:/configuration/${sls:stage}/vpc/sg/id, ssm:/configuration/default/vpc/sg/id}
  privateSubnets:
    - ${ssm:/configuration/${sls:stage}/vpc/subnets/private/a/id, ssm:/configuration/default/vpc/subnets/private/a/id}
    - ${ssm:/configuration/${sls:stage}/vpc/subnets/private/b/id, ssm:/configuration/default/vpc/subnets/private/b/id}
    - ${ssm:/configuration/${sls:stage}/vpc/subnets/private/c/id, ssm:/configuration/default/vpc/subnets/private/c/id}
  publicSubnetA: ${ssm:/configuration/${sls:stage}/vpc/subnets/public/a/id, ssm:/configuration/default/vpc/subnets/public/a/id}
  rotatorArn: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-rotator'
  slackWebhookUrl: ${env:SLACK_WEBHOOK}
  serverless-offline-ssm:
    stages:
      - local
      - offline
    ssm:
      '/configuration/iam/full_permissions_boundary_policy': 'arn:aws:iam::local:policy/local/developer-boundary-policy'
  serverlessTerminationProtection:
    stages:
      - dev
      - val
      - prod
      - main
  pauseAurora:
    other: true
    val: false
    prod: false
  deletionPolicy:
    other: 'Delete'
    val: 'Retain'
    prod: 'Retain'
  auroraMinCapacity:
    other: 0.5
    val: 1
    prod: 1
  scriptable:
    hooks:
      before:package:createDeploymentArtifacts: yarn build
      before:deploy:finalize: node scripts/uploadScripts.js ${self:custom.stage}

package:
  individually: true

functions:
  rotator:
    runtime: python3.7
    handler: lambda_function.lambda_handler
    description: Conducts an AWS SecretsManager secret rotation for RDS PostgreSQL using single user rotation scheme
    timeout: 30
    vpc:
      securityGroupIds: ${self:custom.sgId}
      subnetIds: ${self:custom.privateSubnets}
    environment:
      SECRETS_MANAGER_ENDPOINT: !Sub 'https://secretsmanager.${AWS::Region}.amazonaws.com'
    package:
      artifact: s3://secrets-manager-rotation-apps-c0de1e0412b469545054417cc38af3c3/SecretsManagerRDSPostgreSQLRotationSingleUser/SecretsManagerRDSPostgreSQLRotationSingleUser.zip

resources:
  Conditions:
    IsDevValProd: !Or
      - !Equals ['${sls:stage}', 'main']
      - !Equals ['${sls:stage}', 'val']
      - !Equals ['${sls:stage}', 'prod']
      - !Equals ['${sls:stage}', 'mtdbvm']
  Mappings:
    Logins:
      keys:
        sshPublicKeys: "
          ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDaR+UVq61k14jcuSFfoCfTxvB1IyhU3IQFp4OjpiN4fYMBjE9USeNoHon2ux8VTvL0nRc7Zn4g9HemxiDjdawUxh2oJ8GOTsiFTEWic2nf90SnbjBMn1OZELvMiZzoYDjQFvEp+AgETBA5nhrbHyxWQWIBa7A+XqiqnX0lcZ1p+x8sLIl4F0e583lJeuPQPVkpCicf2GDdtG1TnPxltqJgGaeVSONivpxeVofJwG4DCXy1b1xSo1NG0gzy9BWFJwOWKmZAk6nYq+rcxZg+TgU1x5WJ6z8/CS0PMSoTMRRIejm734PSmkGCU+WkR139Dl8o3DvQh/VQD71fxw30aONG98PSBJEUd5IouuiPPNYGP+fuDWgCBkaoA6JKlSVtbneNt1Qkm10FFHqExqzGWaSDeUCh6da3WG1BW4KZcC3MQ8CTEG47LFqUG5TvhklhiAAJH7cGF9W9SU1Beq2A6Wx1R/yGvgH/7U6X0/QfJi1ljY32pPzP2S+gzzOVGJgrMz3qRRgNvcY5k8EMbIuTK2yanFFHuVaWQq/zZW1T376oyHMfWdBB9WAtIKwpCgA5kYUu0XCo3XM0fWibZFIa/cEBNSKH1gEFKCBXolsc2+c4iZtdbG4YCHLgzOOqklERMEeK5dXq9Rz7UjoE91UVIyO2/d+mXmiVDRgtUsiQ34Sxyw== mojo.talantikite@gmail.com \\n
          ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCttm1LMpbYCjmDQaKrM2KWF2D/xKMWD2y8azKYiZZj2X6KvVCLFs5uskvcgqXJw4G8ePTWdcO1EqXtHG8yWUMFT6YptalmO5jnz18V9fArt9WttPAzZKB7V/KTs5TxvhQ5h59TCJQGoG0/C+LuDH0ZJWuBv1U/l8yBBmWCJu2b41Kq+Hvclv6eLb+0A14o447paknTOHDheKukx3y44yhEYSoVQcIlHm7vApxGGhhhoiWkrdN0a1U4npM8G1MHdNe0360zSVmmFV6FgxFZPmMOK+xKRHNCgJdd5/8Tua+DDckeYw1c4DYEw/nvvITQs855U35RFOeOLi54gWNtwmhMyJJe8r7+Ls/t/lpOe8o1alE6G+QNb7RV8GJ6kIxyYLiUEExmPzBCur8XsJctG9BWS/yBsmEnasqBaq2HHdQMlbKe/AoZgGPlVWbSFXnHkfVlme0NeZa2ya8Igj9xdoK6cgYM6W/zKlopfQV4fdkpcGq1grVOP4vT/gzLKD8clkU= macrae@KIHW10L6038 \\n
          ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDRrQOylmfnH6ptruU7nUzMvwkV6Q2WCFLJlGxbVTKlFiEepsSb4y/P3ZUL+regv8GZiZkWc+x1hiIGDQxF68nTSHv0G9otHeG44nrrQdeJ1rghy+eptyxIcAenUtP3eRhSR3c2/8IP7XPJutrFbQOADlQqwimKYrk1fdcONWt1TB1uPqk/i9mEdAcFn2VVQnWYbJ/mLwd0EPFqqnPFFnUzayaiYQnEZU9xLSSDYCurPEWuYDipJgyH0xsMloSwpV8U7m/v/4cPHU9E4NpnNY4Ke5DNljeqmZxQWbwZMGTWSYt7um3Zn5entr9iWJf0uu5nC03YPl3mgMxeu5wuui2HKiJBQCL1Yinz7ErRm7vR/Q11F8q3vyxey3tjNaMV7wMibtuQZh2ZdCGMlisoM9G44nS/EwDuuvt6PT87fgr2ur2SucOw52NokC6eO49DqXQXB5AVFnFoUMXTEQxz4Jq4uoEP9fz7cJVHrY5LVmtwy1yxoLujldhlRTg+G6bKOnY8embgFMJ+lBI8/R1N0f2r4EkTp3GwMgsDkZs3H/djaQMEdK7daKGYltwnXPiOR1Q0PNnnGMOctE9hSojiV1FX80aycYFEjmkOZzqUHJHgm6OPzYRC+CB5/OEBT+1MPjPcOXmMGa6JrNyc/LJeA5GOlj9JzRO3fOHnp4DlA4ZHEw== maolin@Maos-MacBook-Pro.local \\n
          ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDiKdvKxI2HkraeNla7tFTEijQzQzeBy5Ss044+dV9uhPqVNlRQakFpRwReOQRj1drK5Nyk48r6CXMomT0u74MtGqma+17lvFPxXc+6WywwzeXNEWAvmqniB6hsNs+ysyGJuYa3rNuGzUuwxoe1I6ANtI+nIU67J2UHoHp8XATush2w+flVnprUOJBzYiT3xLrPr6NdW+LKUb3+Vyqwx7sc7wZ1Y1eCNRbC/+aVXxt/lQyTxLn5I4beedIUQ6I6jezNdB8yg5GfpNDvwH25d0Z6V1XFkKzCRSNizgfbC4l2lFCZvLc4+3tdbu7pnkW4mSqHlgqnAn+qONsNovzg9Igq7fMfyxU9VZXKXSBMOIem5QKyFQ4mFgrW7RxLt5VX9tjQ7ImsBx77p1qe0CskEX9knZu3bzETFaqAEuVo7/pHu/aMwlsZtuG8cAY+/2AktVc3Twlz01RoGRLULz8YB7oY7uhHKF4U+eLin6dFmrfNHHlsKCR1LUV4BPGYi6V41GM= worku@hiilaptop.lan \\n
          "

  Resources:
    # VPC endpoint for rotation lambda
    SecretsManagerVPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        SubnetIds: '${self:custom.privateSubnets}'
        SecurityGroupIds: ['${self:custom.sgId}']
        VpcEndpointType: Interface
        ServiceName:
          Fn::Sub: com.amazonaws.${AWS::Region}.secretsmanager
        VpcId: ${self:custom.vpcId}

    PostgresSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: 'aurora_${self:service}_${sls:stage}'
        Description: 'Dynamically generated password for aurora serverless postgres'
        GenerateSecretString:
          SecretStringTemplate: '{"username": "mcreviewadmin"}'
          GenerateStringKey: password
          PasswordLength: 30
          ExcludePunctuation: true

    PostgresAuroraV2:
      Type: AWS::RDS::DBCluster
      DeletionPolicy: ${self:custom.deletionPolicy.${opt:stage}, self:custom.deletionPolicy.other}
      Properties:
        Engine: aurora-postgresql
        DatabaseName: '${self:custom.databaseName}'
        MasterUsername: !Sub '{{resolve:secretsmanager:${PostgresSecret}::username}}'
        MasterUserPassword: !Sub '{{resolve:secretsmanager:${PostgresSecret}::password}}'
        DBSubnetGroupName: !Ref PostgresSubnetGroup
        VpcSecurityGroupIds: ['${self:custom.sgId}']
        CopyTagsToSnapshot: true
        BackupRetentionPeriod: 7
        EnableCloudwatchLogsExports:
          - postgresql
        ServerlessV2ScalingConfiguration:
          MinCapacity: ${self:custom.auroraMinCapacity.${opt:stage}, self:custom.auroraMinCapacity.other}
          MaxCapacity: 16

    PostgresAuroraV2Instance:
      Type: AWS::RDS::DBInstance
      DeletionPolicy: ${self:custom.deletionPolicy.${opt:stage}, self:custom.deletionPolicy.other}
      Properties:
        Engine: aurora-postgresql
        DBInstanceClass: db.serverless
        DBClusterIdentifier: !Ref PostgresAuroraV2
        AutoMinorVersionUpgrade: true

    PostgresVMScriptsBucket:
      Type: 'AWS::S3::Bucket'
      Condition: IsDevValProd
      Properties:
        BucketName: !Sub ${self:service}-${sls:stage}-postgres-infra-scripts
        AccessControl: Private

    PostgresVM:
      Type: 'AWS::EC2::Instance'
      Condition: IsDevValProd
      DependsOn:
        - PostgresVMScriptsBucket
        - PostgresAuroraV2
      Metadata:
        AWS::CloudFormation::Init:
          config:
            files:
              '/home/ubuntu/.ssh/authorized_keys':
                content: !FindInMap [Logins, 'keys', 'sshPublicKeys']
                mode: '000600'
                owner: 'ubuntu'
                group: 'ubuntu'
      Properties:
        InstanceType: t2.micro
        ImageId: ami-05bfc1ab11bfbf484
        IamInstanceProfile: !Ref PgVMIAMInstanceProfile
        KeyName: 'mojo'
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: '0'
            GroupSet:
              - !Ref PostgresVmSg
              - ${self:custom.sgId}
            SubnetId: !Sub ${self:custom.publicSubnetA}
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt update && apt install unzip postgresql postgresql-contrib build-essential python3-pip -y
            pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip
            ./aws/install

            # We need to make sure we download the vm scripts. There can be a lag between when 
            # serverless uploads the scripts and the launch of the instance.
            copy_files_from_s3() {
              aws s3 cp s3://${PostgresVMScriptsBucket}/scripts/vm-startup.sh /usr/local/bin/vm-startup.sh
              aws s3 cp s3://${PostgresVMScriptsBucket}/scripts/vm-shutdown.sh /usr/local/bin/vm-shutdown.sh
              aws s3 cp s3://${PostgresVMScriptsBucket}/scripts/slack-notify.service /etc/systemd/system/notify-slack.service
            }

            download_failures=0
            while true; do
              copy_files_from_s3
              exit_code=$?

              if [ $exit_code -eq 0 ]; then
                echo "Downloaded vm scripts from s3 successfully"
                break
              else
                echo "Failed to download vm scripts from s3. Retrying in 10 seconds..."
                download_failures=$((download_failures+1))

                if [ $download_failures -eq 60 ]; then
                  echo "Maximum attempts of aws s3 cp reached. Exiting..."
                  break
                fi

                sleep 10
              fi
            done

            chmod +x /usr/local/bin/vm-startup.sh
            chmod +x /usr/local/bin/vm-shutdown.sh
            chmod +x /etc/systemd/system/notify-slack.service

            sed -i "s,SLACK_WEBHOOK,${self:custom.slackWebhookUrl},g" /usr/local/bin/vm-startup.sh
            sed -i "s,SLACK_WEBHOOK,${self:custom.slackWebhookUrl},g" /usr/local/bin/vm-shutdown.sh
            sed -i "s,STAGE,${self:custom.stage},g" /usr/local/bin/vm-startup.sh 
            sed -i "s,STAGE,${self:custom.stage},g" /usr/local/bin/vm-shutdown.sh
            systemctl start notify-slack
            systemctl enable notify-slack

            /usr/local/bin/cfn-init -v \
                  --stack ${AWS::StackName} \
                  --resource PostgresVM \
                  --region ${AWS::Region}

    PgVMIAMRole:
      Type: AWS::IAM::Role
      Condition: IsDevValProd
      Properties:
        Path: '/delegatedadmin/developer/'
        PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/cms-cloud-admin/ct-ado-poweruser-permissions-boundary-policy'
        RoleName: !Sub 'postgresvm-${sls:stage}-ServiceRole'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: 's3Access'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 's3:*'
                  Resource:
                    - !GetAtt PostgresVMScriptsBucket.Arn
                    - !Join ['', [!GetAtt PostgresVMScriptsBucket.Arn, '/*']]

    PgVMIAMInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Condition: IsDevValProd
      Properties:
        Path: '/delegatedadmin/developer/'
        Roles:
          - !Ref PgVMIAMRole

    PostgresVmSg:
      Type: 'AWS::EC2::SecurityGroup'
      Condition: IsDevValProd
      Properties:
        GroupDescription: Enable SSH access via port 22
        VpcId: !Sub ${self:custom.vpcId}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0

    PostgresSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: postgres aurora serverless
        SubnetIds: '${self:custom.privateSubnets}'

    SecretsRDSAttachment:
      Type: AWS::SecretsManager::SecretTargetAttachment
      Properties:
        SecretId: !Ref PostgresSecret
        TargetId: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${PostgresAuroraV2}'
        TargetType: AWS::RDS::DBCluster

    PostgresSecretsRotationSchedule:
      Type: AWS::SecretsManager::RotationSchedule
      DependsOn:
        - PostgresAuroraV2
        - SecretsRDSAttachment
      Properties:
        SecretId:
          Ref: PostgresSecret
        RotationLambdaARN: !GetAtt RotatorLambdaFunction.Arn
        RotationRules:
          AutomaticallyAfterDays: 30

    LambdaInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn: RotatorLambdaFunction
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt RotatorLambdaFunction.Arn
        Principal: 'secretsmanager.amazonaws.com'

  Outputs:
    PostgresAuroraV2Arn:
      Value: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${PostgresAuroraV2}'
    PostgresVMScriptsBucket:
      Condition: IsDevValProd
      Value: !Ref PostgresVMScriptsBucket
