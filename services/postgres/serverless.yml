service: postgres

frameworkVersion: '^3.19.0'

plugins:
  - serverless-offline-ssm
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper
  - serverless-iam-helper

provider:
  name: aws
  runtime: python3.7
  region: us-east-1
  iam:
    role:
      path: ${ssm:/configuration/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/iam/full_permissions_boundary_policy}
      statements:
        - Effect: 'Allow'
          Action:
            - secretsmanager:DescribeSecret # pragma: allowlist secret
            - secretsmanager:GetSecretValue # pragma: allowlist secret
            - secretsmanager:PutSecretValue # pragma: allowlist secret
            - secretsmanager:UpdateSecretVersionStage # pragma: allowlist secret
          Resource: '*'
          Condition:
            StringEquals:
              'secretsmanager:resource/AllowRotationLambdaArn': '${self:custom.rotatorArn}' # pragma: allowlist secret
        - Effect: Allow
          Action:
            - secretsmanager:GetRandomPassword # pragma: allowlist secret
          Resource: '*'
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeNetworkInterfaces
          Resource: '*'

custom:
  stage: ${opt:stage, self:provider.stage}
  databaseName: !Sub aurora_${self:service}_${sls:stage}_${AWS::AccountId}
  vpcId: ${ssm:/configuration/${sls:stage}/vpc/id, ssm:/configuration/default/vpc/id}
  sgId: ${ssm:/configuration/${sls:stage}/vpc/sg/id, ssm:/configuration/default/vpc/sg/id}
  privateSubnets:
    - ${ssm:/configuration/${sls:stage}/vpc/subnets/private/a/id, ssm:/configuration/default/vpc/subnets/private/a/id}
    - ${ssm:/configuration/${sls:stage}/vpc/subnets/private/b/id, ssm:/configuration/default/vpc/subnets/private/b/id}
    - ${ssm:/configuration/${sls:stage}/vpc/subnets/private/c/id, ssm:/configuration/default/vpc/subnets/private/c/id}
  publicSubnetA: ${ssm:/configuration/${sls:stage}/vpc/subnets/public/a/id, ssm:/configuration/default/vpc/subnets/public/a/id}
  rotatorArn: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-rotator'
  serverless-offline-ssm:
    stages:
      - local
      - offline
    ssm:
      '/configuration/iam/full_permissions_boundary_policy': 'arn:aws:iam::local:policy/local/developer-boundary-policy'
  serverlessTerminationProtection:
    stages:
      - dev
      - val
      - prod
      - main
  pauseAurora:
    other: true
    val: false
    prod: false
  deletionPolicy:
    other: 'Delete'
    val: 'Retain'
    prod: 'Retain'
  auroraMinCapacity:
    other: 0.5
    val: 1
    prod: 1

package:
  individually: true

functions:
  rotator:
    runtime: python3.7
    handler: lambda_function.lambda_handler
    description: Conducts an AWS SecretsManager secret rotation for RDS PostgreSQL using single user rotation scheme
    timeout: 30
    vpc:
      securityGroupIds: ${self:custom.sgId}
      subnetIds: ${self:custom.privateSubnets}
    environment:
      SECRETS_MANAGER_ENDPOINT: !Sub 'https://secretsmanager.${AWS::Region}.amazonaws.com'
    package:
      artifact: s3://secrets-manager-rotation-apps-c0de1e0412b469545054417cc38af3c3/SecretsManagerRDSPostgreSQLRotationSingleUser/SecretsManagerRDSPostgreSQLRotationSingleUser.zip

resources:
  Conditions:
    IsDevValProd: !Or
      - !Equals ['${sls:stage}', 'main']
      - !Equals ['${sls:stage}', 'val']
      - !Equals ['${sls.stage}', 'prod']
      - !Equals ['${sls:stage}', 'mtdbvm']
  Mappings:
    Logins:
      mojo:
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDaR+UVq61k14jcuSFfoCfTxvB1IyhU3IQFp4OjpiN4fYMBjE9USeNoHon2ux8VTvL0nRc7Zn4g9HemxiDjdawUxh2oJ8GOTsiFTEWic2nf90SnbjBMn1OZELvMiZzoYDjQFvEp+AgETBA5nhrbHyxWQWIBa7A+XqiqnX0lcZ1p+x8sLIl4F0e583lJeuPQPVkpCicf2GDdtG1TnPxltqJgGaeVSONivpxeVofJwG4DCXy1b1xSo1NG0gzy9BWFJwOWKmZAk6nYq+rcxZg+TgU1x5WJ6z8/CS0PMSoTMRRIejm734PSmkGCU+WkR139Dl8o3DvQh/VQD71fxw30aONG98PSBJEUd5IouuiPPNYGP+fuDWgCBkaoA6JKlSVtbneNt1Qkm10FFHqExqzGWaSDeUCh6da3WG1BW4KZcC3MQ8CTEG47LFqUG5TvhklhiAAJH7cGF9W9SU1Beq2A6Wx1R/yGvgH/7U6X0/QfJi1ljY32pPzP2S+gzzOVGJgrMz3qRRgNvcY5k8EMbIuTK2yanFFHuVaWQq/zZW1T376oyHMfWdBB9WAtIKwpCgA5kYUu0XCo3XM0fWibZFIa/cEBNSKH1gEFKCBXolsc2+c4iZtdbG4YCHLgzOOqklERMEeK5dXq9Rz7UjoE91UVIyO2/d+mXmiVDRgtUsiQ34Sxyw== mojo.talantikite@gmail.com'
      test-user:
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDDeoQdyqwEhJJVziFKhftXMg0XoZq5yJVxqPkcTmRuDse91YyFirB2mKYdKcH5JSvoDRNcgmHlBAYhpA6hwqaQhjgnwwlFeR1C1W3WZoczOmtqoU5sC20cMYr1CJOJWvP3C1MwbJRDGNSLpi+HcIwEkGDbwxQSHy1/1eLU0CFdYgtFS/g3TYg61M75rQadJAZddFY9UVIxC7AIemdR1GBxo6NXtnuSnutNHAAYTWUYxwL2V/Tz59UmDJIN2DAC6TIH8ndDhloyTSJgoeLEyYm7V4B94CY1+JNRwk0SPvg5xYMyAoKAiLKCDq3TA3DnFo4utgxTv2vNnKREiRb3cZRAtnbv50Oz7WqH5nGPad3uUsQKWm9hCuBg9J/Q8620UE7pA/FymFsZBxoYFNt0yJJPZcdHgRgYqs7m3fdEOHz9bgRHQBPP9cORtsx/JcJk7QCBvYRFatQiQm5Whe0p5tJfowwyl4NNEqaRnQhCupXipxnDlh8esxHNUlrioLzTUSs= test'

  Resources:
    # VPC endpoint for rotation lambda
    SecretsManagerVPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        SubnetIds: '${self:custom.privateSubnets}'
        SecurityGroupIds: ['${self:custom.sgId}']
        VpcEndpointType: Interface
        ServiceName:
          Fn::Sub: com.amazonaws.${AWS::Region}.secretsmanager
        VpcId: ${self:custom.vpcId}

    PostgresSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: 'aurora_${self:service}_${sls:stage}'
        Description: 'Dynamically generated password for aurora serverless postgres'
        GenerateSecretString:
          SecretStringTemplate: '{"username": "mcreviewadmin"}'
          GenerateStringKey: password
          PasswordLength: 30
          ExcludePunctuation: true

    PostgresAuroraV2:
      Type: AWS::RDS::DBCluster
      DeletionPolicy: ${self:custom.deletionPolicy.${opt:stage}, self:custom.deletionPolicy.other}
      Properties:
        Engine: aurora-postgresql
        DatabaseName: '${self:custom.databaseName}'
        MasterUsername: !Sub '{{resolve:secretsmanager:${PostgresSecret}::username}}'
        MasterUserPassword: !Sub '{{resolve:secretsmanager:${PostgresSecret}::password}}'
        DBSubnetGroupName: !Ref PostgresSubnetGroup
        VpcSecurityGroupIds: ['${self:custom.sgId}']
        CopyTagsToSnapshot: true
        BackupRetentionPeriod: 7
        EnableCloudwatchLogsExports:
          - postgresql
        ServerlessV2ScalingConfiguration:
          MinCapacity: ${self:custom.auroraMinCapacity.${opt:stage}, self:custom.auroraMinCapacity.other}
          MaxCapacity: 16

    PostgresAuroraV2Instance:
      Type: AWS::RDS::DBInstance
      DeletionPolicy: ${self:custom.deletionPolicy.${opt:stage}, self:custom.deletionPolicy.other}
      Properties:
        Engine: aurora-postgresql
        DBInstanceClass: db.serverless
        DBClusterIdentifier: !Ref PostgresAuroraV2
        AutoMinorVersionUpgrade: true

    PostgresVM:
      Type: 'AWS::EC2::Instance'
      Condition: IsDevValProd
      Metadata:
        AWS::CloudFormation::Init:
          config:
            files:
              '/home/ubuntu/.ssh/authorized_keys':
                content: !FindInMap [Logins, 'mojo', 'sshPublicKey']
                mode: '000600'
                owner: 'ubuntu'
                group: 'ubuntu'
      Properties:
        InstanceType: t2.micro
        ImageId: ami-05bfc1ab11bfbf484
        KeyName: 'mojo'
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: '0'
            GroupSet:
              - !Ref PostgresVmSg
            SubnetId: !Sub ${self:custom.publicSubnetA}

    PostgresVmSg:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Enable SSH access via port 22
        VpcId: !Sub ${self:custom.vpcId}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0

    PostgresSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: postgres aurora serverless
        SubnetIds: '${self:custom.privateSubnets}'

    SecretsRDSAttachment:
      Type: AWS::SecretsManager::SecretTargetAttachment
      Properties:
        SecretId: !Ref PostgresSecret
        TargetId: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${PostgresAuroraV2}'
        TargetType: AWS::RDS::DBCluster

    PostgresSecretsRotationSchedule:
      Type: AWS::SecretsManager::RotationSchedule
      DependsOn:
        - PostgresAuroraV2
        - SecretsRDSAttachment
      Properties:
        SecretId:
          Ref: PostgresSecret
        RotationLambdaARN: !GetAtt RotatorLambdaFunction.Arn
        RotationRules:
          AutomaticallyAfterDays: 30

    LambdaInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn: RotatorLambdaFunction
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt RotatorLambdaFunction.Arn
        Principal: 'secretsmanager.amazonaws.com'

  Outputs:
    PostgresAuroraV2Arn:
      Value: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${PostgresAuroraV2}'
