service: postgres
variablesResolutionMode: 20210326

frameworkVersion: '2'

plugins:
  - serverless-stack-termination-protection

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1

custom:
  stage: ${opt:stage, self:provider.stage}
  vpcId: ${ssm:/configuration/${self:custom.stage}/vpc/id, ssm:/configuration/default/vpc/id}
  sgId:
    - ${ssm:/configuration/${self:custom.stage}/vpc/sg/id, ssm:/configuration/default/vpc/sg/id}
  privateSubnets:
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/a/id, ssm:/configuration/default/vpc/subnets/private/a/id}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/b/id, ssm:/configuration/default/vpc/subnets/private/b/id}
    - ${ssm:/configuration/${self:custom.stage}/vpc/subnets/private/c/id, ssm:/configuration/default/vpc/subnets/private/c/id}

resources:
  Resources:
    # VPC endpoint for rotation lambda
    SecretsManagerVPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        SubnetIds: '${self:custom.privateSubnets}'
        SecurityGroupIds: ${self:custom.sgId}
        VpcEndpointType: Interface
        ServiceName:
          Fn::Sub: com.amazonaws.${AWS::Region}.secretsmanager
        PrivateDnsEnabled: true
        VpcId: ${self:custom.vpcId}

    PostgresSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Description: 'Dynamically generated password for aurora serverless postgres'
        GenerateSecretString:
          SecretStringTemplate: '{"username": "admin"}'
          GenerateStringKey: password
          PasswordLength: 30
          ExcludeCharacters: "\"@/\\"

    PostgresRDS:
      Type: AWS::RDS::DBCluster
      Properties:
        Engine: aurora-postgresql
        EngineMode: serverless
        DatabaseName: !Sub '${self:service.name}_${self:custom.stage}_aurora_${AWS::AccountId}'
        MasterUsername: !Sub '{{resolve:secretsmanager:${PostgresSecret}::username}}'
        MasterUserPassword: !Sub '{{resolve:secretsmanager:${PostgresSecret}::password}}'
        DBSubnetGroupName: !Ref PostgresSubnetGroup
        VpcSecurityGroupIds: ${self:custom.sgId}

    PostgresSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: postgres aurora serverless
        SubnetIds: '${self:custom.privateSubnets}'

    SecretsRDSAttachment:
      Type: AWS::SecretsManager::SecretTargetAttachment
      Properties:
        SecretId: !Ref PostgresSecret
        TargetId: !Ref PostgresRDS
        TargetType: AWS::RDS::DBInstance

    PostgresSecretsRotationSchedule:
      Type: AWS::SecretsManager::RotationSchedule
      DependsOn: SecretsRDSAttachment
      Properties:
        SecretId:
          Ref: PostgresSecret
        HostedRotationLambda:
          RotationType: MySQLSingleUser
          RotationLambdaName: SecretsManagerRotation
          VpcSecurityGroupIds: ${self:custom.sgId}
          VpcSubnetIds: '${self:custom.privateSubnets}'
        RotationRules:
          AutomaticallyAfterDays: 30
