name: deploy and migrate postgres

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DEFAULT_REGION:
        required: true
      IAM_PATH:
        required: true
      FULL_IAM_PERMISSIONS_BOUNDARY_POLICY:
        required: true
      REACT_APP_AUTH_MODE:
        required: true

jobs:
  build-prisma-client-lambda-layer:
    name: build - postgres prisma layer
    runs-on: ubuntu-18.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - uses: actions/setup-node@v2.4.0
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}

      - name: Install packages
        working-directory: services/app-api
        run: PRISMA_CLI_BINARY_TARGETS=rhel-openssl-1.0.x yarn install --frozen-lockfile

      # Generate Prisma Client and binary that can run in a lambda environment
      - name: Prepare prisma client
        working-directory: services/app-api
        run: PRISMA_CLI_BINARY_TARGETS=rhel-openssl-1.0.x yarn prisma generate

      - name: Prepare "@prisma/client" lambda layer
        working-directory: services/app-api
        run: ./scripts/prepare-prisma-layer.sh

      - uses: actions/upload-artifact@v2
        with:
          name: lambda-layers-prisma-client
          path: ./services/app-api/lambda-layers-prisma-client

  deploy-app-api:
    name: deploy - app-api
    needs: [build-prisma-client-lambda-layer, deploy-postgres]
    runs-on: ubuntu-18.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          REACT_APP_AUTH_MODE: ${{ secrets.REACT_APP_AUTH_MODE }}
          IAM_PATH: ${{ secrets.IAM_PATH }}
          FULL_IAM_PERMISSIONS_BOUNDARY_POLICY: ${{ secrets.FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}

      - name: Generate graphql
        run: ./dev generate

      - name: Install packages
        working-directory: services/app-api
        run: yarn --frozen-lockfile

      - uses: actions/download-artifact@v2
        with:
          name: lambda-layers-prisma-client
          path: ./services/app-api/lambda-layers-prisma-client

      - name: Unzip prisma layer
        run: |
          tar -C ./services/app-api/lambda-layers-prisma-client -xf ./services/app-api/lambda-layers-prisma-client/nodejs.tar.gz
          rm -rf ./services/app-api/lambda-layers-prisma-client/nodejs.tar.gz

      - name: deploy app-api
        id: deploy-app-api
        run: |
          pushd services/app-api && npx serverless deploy --stage $STAGE_PREFIX$branch_name

  deploy-postgres:
    name: deploy - postgres
    runs-on: ubuntu-18.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          REACT_APP_AUTH_MODE: ${{ secrets.REACT_APP_AUTH_MODE }}
          IAM_PATH: ${{ secrets.IAM_PATH }}
          FULL_IAM_PERMISSIONS_BOUNDARY_POLICY: ${{ secrets.FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}

      - name: Install packages
        working-directory: services/postgres
        run: yarn --frozen-lockfile

      - name: deploy postgres
        id: deploy-postgres
        run: |
          pushd services/postgres && npx serverless deploy --stage $STAGE_PREFIX$branch_name

  run-migrations:
    name: prisma-migrate
    needs: [deploy-app-api]
    runs-on: ubuntu-18.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - uses: actions/setup-node@v2.4.0
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}

      - name: set branch_name
        run: |
          echo "branch_name=$(./scripts/stage_name_for_branch.sh ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: set app version
        run: echo "APP_VERSION=$(scripts/app_version.sh)" >> $GITHUB_ENV

      - name: set branch specific variable names
        run: ./.github/build_vars.sh set_names

      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          REACT_APP_AUTH_MODE: ${{ secrets.REACT_APP_AUTH_MODE }}
          IAM_PATH: ${{ secrets.IAM_PATH }}
          FULL_IAM_PERMISSIONS_BOUNDARY_POLICY: ${{ secrets.FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}

      - name: Install packages
        working-directory: services/app-api
        run: yarn --frozen-lockfile

      - name: run migrations
        id: run-migrations
        run: |
          pushd services/app-api && ./scripts/invoke-migrate-lambda.sh app-api-$branch_name-migrate
