name: Deploy

on:
  push:
    branches:
      - '*'
      - 'dependabot/**'
      - '!skipci*'
      - '!main'

jobs:
  unit-tests:
    name: test - unit tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13.3
        env:
          REACT_APP_AUTH_MODE: LOCAL
          POSTGRES_PASSWORD: shhhsecret
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    outputs:
      deploy-id: ${{ steps.ghdeployment.outputs.deployment_id }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: lock this branch to prevent concurrent builds
        run: ./.github/github-lock.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for secrets
        uses: ./.github/actions/check_secrets
        with:
          expected-secret: ${{ secrets.REACT_APP_AUTH_MODE }}

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: set variable values
        shell: bash
        run: ./.github/build_vars.sh set_values
        env:
          REACT_APP_AUTH_MODE: LOCAL
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          INFRASTRUCTURE_TYPE: ${{ secrets.INFRASTRUCTURE_TYPE || 'development' }}
          SES_SOURCE_EMAIL_ADDRESS: ${{ secrets.SES_SOURCE_EMAIL_ADDRESS }}
          SES_REVIEW_TEAM_EMAIL_ADDRESS: ${{ secrets.SES_REVIEW_TEAM_EMAIL_ADDRESS }}
          OKTA_METADATA_URL: ${{ secrets.OKTA_METADATA_URL }}
          IAM_PATH: ${{ secrets.IAM_PATH }}
          FULL_IAM_PERMISSIONS_BOUNDARY_POLICY: ${{ secrets.FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
          DYNAMO_CONNECTION: ${{ secrets.DYNAMO_CONNECTION}}
          TEST_USERS_PASS: ${{ secrets.TEST_USERS_PASS }}

      - name: Unit Tests
        env:
          DATABASE_URL: postgresql://postgres:shhhsecret@localhost:5432/postgres?schema=public&connection_limit=5
        run: ./dev test --unit --run-db

      - name: publish code coverage
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: cace182021fe88d327fa8d95355ac6081f420e094a214fe77feb5df2f0259e9d
        with:
          debug: true
          coverageLocations: |
            ${{github.workspace}}/services/app-api/coverage/lcov.info:lcov
            ${{github.workspace}}/services/app-web/coverage/lcov.info:lcov

      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: ghdeployment
        with:
          token: '${{ github.token }}'
          environment: review-apps
          description: stack ${{ env.branch_name }}
          initial_status: in_progress

  build-prisma-client-lambda-layer:
    name: build - postgres prisma layer
    needs: [unit-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}

      - name: Install packages
        working-directory: services/app-api
        run: PRISMA_CLI_BINARY_TARGETS=rhel-openssl-1.0.x yarn install --frozen-lockfile

      # Generate Prisma Client and binary that can run in a lambda environment
      - name: Prepare prisma client
        working-directory: services/app-api
        run: PRISMA_CLI_BINARY_TARGETS=rhel-openssl-1.0.x yarn prisma generate

      - name: Prepare "@prisma/client" lambda layer
        working-directory: services/app-api
        run: ./scripts/prepare-prisma-layer.sh

      - uses: actions/upload-artifact@v2
        with:
          name: lambda-layers-prisma-client
          path: ./services/app-api/lambda-layers-prisma-client

  get-branch-name-vars:
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.branch-name.outputs.stage-name-for-branch}}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: set branch_name
        id: branch-name
        shell: bash
        run: |
          echo "::set-output name=stage-name-for-branch::$(./scripts/stage_name_for_branch.sh ${GITHUB_REF#refs/heads/})"

  deploy-branch:
    needs: [build-prisma-client-lambda-layer, get-branch-name-vars]
    uses: CMSgov/managed-care-review/.github/workflows/deploy-to-env.yml@main
    with:
      stage_name: ${{ needs.get-branch-name-vars.outputs.branch-name}}
    secrets:
      aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws_default_region: ${{ secrets.AWS_DEFAULT_REGION }}
      infrastructure_type: ${{ secrets.INFRASTRUCTURE_TYPE || 'development' }}
      ses_source_email_address: ${{ secrets.SES_SOURCE_EMAIL_ADDRESS }}
      ses_review_team_email_address: ${{ secrets.SES_REVIEW_TEAM_EMAIL_ADDRESS }}
      okta_metadata_url: ${{ secrets.OKTA_METADATA_URL }}
      iam_path: ${{ secrets.IAM_PATH }}
      full_iam_permissions_boundary_policy: ${{ secrets.FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
      dynamo_connection: ${{ secrets.DYNAMO_CONNECTION}}
      test_users_pass: ${{ secrets.TEST_USERS_PASS}}
      react_app_auth_mode: AWS_COGNITO

  cypress:
    name: run-cypress
    needs: [deploy-branch, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          REACT_APP_AUTH_MODE: AWS_COGNITO
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          INFRASTRUCTURE_TYPE: ${{ secrets.INFRASTRUCTURE_TYPE || 'development' }}
          SES_SOURCE_EMAIL_ADDRESS: ${{ secrets.SES_SOURCE_EMAIL_ADDRESS }}
          SES_REVIEW_TEAM_EMAIL_ADDRESS: ${{ secrets.SES_REVIEW_TEAM_EMAIL_ADDRESS }}
          OKTA_METADATA_URL: ${{ secrets.OKTA_METADATA_URL }}
          IAM_PATH: ${{ secrets.IAM_PATH }}
          FULL_IAM_PERMISSIONS_BOUNDARY_POLICY: ${{ secrets.FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
          DYNAMO_CONNECTION: ${{ secrets.DYNAMO_CONNECTION}}
          TEST_USERS_PASS: ${{ secrets.TEST_USERS_PASS }}

      - name: Install packages in root
        run: yarn install --frozen-lockfile

      - name: Install Cypress
        run: yarn cypress install

      - name: Install packages in ui
        working-directory: services/ui
        run: yarn install --frozen-lockfile

      - name: Generate graphql
        run: ./dev generate

      - name: Set application endpoint
        run: |
          cd services
          endpoint=$(./output.sh ui CloudFrontEndpointUrl $branch_name)
          echo "APPLICATION_ENDPOINT=$endpoint" >> "$GITHUB_ENV"

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: '${{ github.token }}'
          environment_url: ${{env.APPLICATION_ENDPOINT}}
          state: 'success'
          deployment_id: ${{ needs.unit-tests.outputs.deploy-id }}

      - name: Update deployment status (failure)
        if: failure() && needs.deploy-branch.outcome == 'failure'
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: '${{ github.token }}'
          state: 'failure'
          deployment_id: ${{ needs.unit-tests.outputs.deploy-id }}

      - name: Create Test Users
        run: |
          # this script was compiled along with ./dev above. If that changes, run `tsc` to compile it
          node ./build_dev/scripts/add_cypress_test_users.js $branch_name $TEST_USERS_PASS

      - name: Cypress run
        id: cypress
        uses: cypress-io/github-action@v2
        with:
          config: baseUrl=${{env.APPLICATION_ENDPOINT}}
          record: true
        env:
          DEBUG: 'cypress:*'
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload cypress screenshots
        uses: actions/upload-artifact@v2.2.4
        if: failure() && steps.cypress.outcome == 'failure'
        with:
          name: cypress-screenshots
          path: tests/cypress/screenshots

      - name: Upload cypress video
        uses: actions/upload-artifact@v2.2.4
        if: always() && steps.cypress.outcome != 'skipped'
        with:
          name: cypress-videos
          path: tests/cypress/videos
