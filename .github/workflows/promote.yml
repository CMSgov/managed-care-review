name: Promote

on:
  push:
    branches:
      - 'main'

jobs:
  unit-tests:
    name: test - unit tests
    runs-on: ubuntu-latest
    outputs:
      app-version: ${{ steps.branch-name.outputs.app-version}}
      changed-services: "[
        'app-api',
        'app-web',
        'postgres',
        'storybook',
        'ui-auth',
        'ui',
        'uploads',
        'run-migrations',
        'prisma-layer',
        'infra-api'
        ]"
    services:
      postgres:
        image: postgres:13.3
        env:
          REACT_APP_AUTH_MODE: IDM
          POSTGRES_PASSWORD: shhhsecret #pragma: allowlist secret
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: lock this branch to prevent concurrent builds
        run: ./.github/github-lock.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: set app version
        id: app-version
        shell: bash
        run: echo "::set-output name=app-version::$(scripts/app_version.sh)"

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Unit Tests
        env:
          REACT_APP_AUTH_MODE: IDM
          DATABASE_URL: postgresql://postgres:shhhsecret@localhost:5432/postgres?schema=public&connection_limit=5 #pragma: allowlist secret
        run: ./dev test --unit

      - name: publish code coverage
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: cace182021fe88d327fa8d95355ac6081f420e094a214fe77feb5df2f0259e9d
        with:
          debug: true
          coverageLocations: |
            ${{github.workspace}}/services/app-api/coverage/lcov.info:lcov
            ${{github.workspace}}/services/app-web/coverage/lcov.info:lcov

  build-prisma-client-lambda-layer:
    name: build - postgres prisma layer
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2.5.1
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'

      - name: Get yarn cache directory path
        shell: bash
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Install packages
        working-directory: services/app-api
        run: PRISMA_CLI_BINARY_TARGETS=rhel-openssl-1.0.x yarn install --prefer-offline --frozen-lockfile --cache-folder ${{ steps.yarn-cache-dir-path.outputs.dir }}

      # Generate Prisma Client and binary that can run in a lambda environment
      - name: Prepare prisma client
        working-directory: services/app-api
        run: PRISMA_CLI_BINARY_TARGETS=rhel-openssl-1.0.x yarn prisma generate

      - name: Prepare "@prisma/client" lambda layer
        working-directory: services/app-api
        run: ./scripts/prepare-prisma-layer.sh

      - uses: actions/upload-artifact@v2
        with:
          name: lambda-layers-prisma-client
          path: ./services/app-api/lambda-layers-prisma-client

  promote-infra-dev:
    needs: [build-prisma-client-lambda-layer, unit-tests]
    uses: CMSgov/managed-care-review/.github/workflows/deploy-infra-to-env.yml@main
    with:
      stage_name: main
      changed_services: ${{ needs.unit-tests.outputs.changed-services}}
    secrets:
      aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws_default_region: ${{ secrets.AWS_DEFAULT_REGION }}
      ses_source_email_address: ${{ secrets.SES_SOURCE_EMAIL_ADDRESS }}
      okta_metadata_url: ${{ secrets.OKTA_METADATA_URL }}
      iam_path: ${{ secrets.IAM_PATH }}
      full_iam_permissions_boundary_policy: ${{ secrets.FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
      cloudfront_certificate_arn: ${{ secrets.DEV_CLOUDFRONT_CERTIFICATE_ARN }}
      cloudfront_domain_name: ${{ secrets.DEV_CLOUDFRONT_DOMAIN_NAME }}
      cloudfront_storybook_domain_name: ${{ secrets.DEV_CLOUDFRONT_STORYBOOK_DOMAIN_NAME }}

  promote-app-dev:
    needs: [promote-infra-dev, build-prisma-client-lambda-layer, unit-tests]
    uses: CMSgov/managed-care-review/.github/workflows/deploy-app-to-env.yml@main
    with:
      stage_name: main
      app_version: ${{ needs.unit-tests.outputs.app-version }}
      changed_services: ${{ needs.unit-tests.outputs.changed-services}}
    secrets:
      aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws_default_region: ${{ secrets.AWS_DEFAULT_REGION }}
      iam_path: ${{ secrets.IAM_PATH }}
      full_iam_permissions_boundary_policy: ${{ secrets.FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
      ses_source_email_address: ${{ secrets.SES_SOURCE_EMAIL_ADDRESS }}
      ses_review_team_email_addresses: ${{ secrets.SES_REVIEW_TEAM_EMAIL_ADDRESSES }}
      react_app_auth_mode: IDM

  dev-cypress:
    name: dev - cypress
    needs: [promote-app-dev]
    runs-on: ubuntu-latest
    container: cypress/browsers:node14.17.0-chrome91-ff89
    strategy:
      fail-fast: false
      matrix:
        # run copies of the current job in parallel
        containers: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v2

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Cypress on Dev -- Chrome
        id: cypressdev
        uses: cypress-io/github-action@v2
        with:
          install: false
          config: baseUrl=https://mc-review-dev.onemac.cms.gov
          spec: tests/cypress/integration/promoteWorkflow/promote.spec.ts
          record: true
          parallel: true
          browser: chrome
          group: 'Chrome'
        env:
          REACT_APP_AUTH_MODE: IDM
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload cypress video
        uses: actions/upload-artifact@v2.2.4
        if: failure() && steps.cypressdev.outcome == 'failure'
        with:
          name: cypress-videos
          path: tests/cypress/videos

      - name: Alert Slack On Failure
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Deploy Alerts
          SLACK_ICON_EMOJI: ':bell:'
          SLACK_COLOR: ${{job.status}}
          SLACK_FOOTER: ''
          MSG_MINIMAL: actions url,commit

  promote-infra-val:
    needs: [dev-cypress, unit-tests]
    uses: CMSgov/managed-care-review/.github/workflows/deploy-infra-to-env.yml@main
    with:
      stage_name: val
      changed_services: ${{ needs.unit-tests.outputs.changed-services}}
    secrets:
      aws_access_key_id: ${{ secrets.VAL_AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.VAL_AWS_SECRET_ACCESS_KEY }}
      cloudfront_certificate_arn: ${{ secrets.VAL_CLOUDFRONT_CERTIFICATE_ARN }}
      cloudfront_domain_name: ${{ secrets.VAL_CLOUDFRONT_DOMAIN_NAME }}
      cloudfront_storybook_domain_name: ${{ secrets.VAL_CLOUDFRONT_STORYBOOK_DOMAIN_NAME }}
      okta_metadata_url: ${{ secrets.VAL_OKTA_METADATA_URL }}
      full_iam_permissions_boundary_policy: ${{ secrets.VAL_FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
      aws_default_region: ${{ secrets.AWS_DEFAULT_REGION }}
      ses_source_email_address: ${{ secrets.SES_SOURCE_EMAIL_ADDRESS }}
      iam_path: ${{ secrets.IAM_PATH }}

  promote-app-val:
    needs: [dev-cypress, promote-infra-val, unit-tests]
    uses: CMSgov/managed-care-review/.github/workflows/deploy-app-to-env.yml@main
    with:
      stage_name: val
      app_version: ${{ needs.unit-tests.outputs.app-version }}
      changed_services: ${{ needs.unit-tests.outputs.changed-services}}
    secrets:
      aws_access_key_id: ${{ secrets.VAL_AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.VAL_AWS_SECRET_ACCESS_KEY }}
      aws_default_region: ${{ secrets.AWS_DEFAULT_REGION }}
      iam_path: ${{ secrets.IAM_PATH }}
      full_iam_permissions_boundary_policy: ${{ secrets.VAL_FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
      react_app_auth_mode: IDM
      ses_source_email_address: ${{ secrets.SES_SOURCE_EMAIL_ADDRESS }}
      ses_review_team_email_addresses: ${{ secrets.SES_REVIEW_TEAM_EMAIL_ADDRESSES }}

  cypress-val:
    name: val - cypress
    needs: [promote-app-val]
    runs-on: ubuntu-latest
    container: cypress/browsers:node14.17.0-chrome91-ff89
    strategy:
      fail-fast: false
      matrix:
        # run copies of the current job in parallel
        containers: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v2

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Cypress on Val -- Chrome
        id: cypressval
        uses: cypress-io/github-action@v2
        with:
          install: false
          config: baseUrl=https://mc-review-val.onemac.cms.gov
          spec: tests/cypress/integration/promoteWorkflow/promote.spec.ts
          record: true
          parallel: true
          browser: chrome
          group: 'Chrome'
        env:
          REACT_APP_AUTH_MODE: IDM
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload cypress video
        uses: actions/upload-artifact@v2.2.4
        if: failure() && steps.cypressval.outcome == 'failure'
        with:
          name: cypress-videos
          path: tests/cypress/videos

      - name: Alert Slack On Failure
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Deploy Alerts
          SLACK_ICON_EMOJI: ':bell:'
          SLACK_COLOR: ${{job.status}}
          SLACK_FOOTER: ''
          MSG_MINIMAL: actions url,commit

  promote-infra-prod:
    needs: [cypress-val, unit-tests]
    uses: CMSgov/managed-care-review/.github/workflows/deploy-infra-to-env.yml@main
    with:
      stage_name: prod
      changed_services: ${{ needs.unit-tests.outputs.changed-services}}
    secrets:
      aws_access_key_id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
      cloudfront_certificate_arn: ${{ secrets.PROD_CLOUDFRONT_CERTIFICATE_ARN }}
      cloudfront_domain_name: ${{ secrets.PROD_CLOUDFRONT_DOMAIN_NAME }}
      cloudfront_storybook_domain_name: ${{ secrets.PROD_CLOUDFRONT_STORYBOOK_DOMAIN_NAME }}
      okta_metadata_url: ${{ secrets.PROD_OKTA_METADATA_URL }}
      full_iam_permissions_boundary_policy: ${{ secrets.PROD_FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
      aws_default_region: ${{ secrets.AWS_DEFAULT_REGION }}
      ses_source_email_address: ${{ secrets.SES_SOURCE_EMAIL_ADDRESS }}
      iam_path: ${{ secrets.IAM_PATH }}

  promote-app-prod:
    needs: [cypress-val, promote-infra-prod, unit-tests]
    uses: CMSgov/managed-care-review/.github/workflows/deploy-app-to-env.yml@main
    with:
      stage_name: prod
      app_version: ${{ needs.unit-tests.outputs.app-version }}
      changed_services: ${{ needs.unit-tests.outputs.changed-services}}
    secrets:
      aws_access_key_id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
      aws_default_region: ${{ secrets.AWS_DEFAULT_REGION }}
      iam_path: ${{ secrets.IAM_PATH }}
      full_iam_permissions_boundary_policy: ${{ secrets.PROD_FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
      react_app_auth_mode: IDM
      ses_source_email_address: ${{ secrets.SES_SOURCE_EMAIL_ADDRESS }}
      ses_review_team_email_addresses: ${{ secrets.PROD_SES_REVIEW_TEAM_EMAIL_ADDRESSES }}

  cypress-prod:
    name: prod - cypress
    needs: [promote-app-prod]
    runs-on: ubuntu-latest
    container: cypress/browsers:node14.17.0-chrome91-ff89
    strategy:
      fail-fast: false
      matrix:
        # run copies of the current job in parallel
        containers: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v2

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Cypress on Prod -- Chrome
        id: cypress
        uses: cypress-io/github-action@v2
        with:
          install: false
          config: baseUrl=https://mc-review.onemac.cms.gov
          spec: tests/cypress/integration/promoteWorkflow/promote.spec.ts
          record: true
          parallel: true
          browser: chrome
          group: 'Chrome'
        env:
          REACT_APP_AUTH_MODE: IDM
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload cypress video
        uses: actions/upload-artifact@v2.2.4
        if: failure() && steps.cypressprod.outcome == 'failure'
        with:
          name: cypress-videos
          path: tests/cypress/videos

  slack:
    name: Slack notification on failure
    runs-on: ubuntu-latest
    needs: [cypress-prod, cypress-val]
    if: always()
    steps:
      # this action sets env.WORKFLOW_CONCLUSION so we can call a
      # failure notification if any part of the workflow fails
      - uses: technote-space/workflow-conclusion-action@v2

      - name: Alert Slack On Failure
        uses: rtCamp/action-slack-notify@v2
        if: (env.WORKFLOW_CONCLUSION == 'failure' || needs.cypress-prod.result == 'skipped' || needs.cypress-val.result == 'skipped')
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Deploy Alerts
          SLACK_ICON_EMOJI: ':bell:'
          SLACK_COLOR: failure
          SLACK_FOOTER: ''
          MSG_MINIMAL: actions url,commit
