name: Promote

on:
  push:
    branches:
      - 'main'

jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - name: set branch_name
        run: echo "branch_name=main" >> $GITHUB_ENV
      - uses: actions/checkout@v2.3.4
      - name: set app version
        run: echo "APP_VERSION=$(scripts/app_version.sh)" >> $GITHUB_ENV
      - name: set branch specific variable names
        run: ./.github/build_vars.sh set_names
      - name: set variable values
        run: ./.github/build_vars.sh set_values
        env:
          REACT_APP_AUTH_MODE: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_REACT_APP_AUTH_MODE] || secrets.REACT_APP_AUTH_MODE }}
          AWS_ACCESS_KEY_ID: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_ACCESS_KEY_ID] || secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_SECRET_ACCESS_KEY] || secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_DEFAULT_REGION] || secrets.AWS_DEFAULT_REGION }}
          INFRASTRUCTURE_TYPE: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_INFRASTRUCTURE_TYPE] || secrets.INFRASTRUCTURE_TYPE || 'development' }}
          SES_SOURCE_EMAIL_ADDRESS: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_SES_SOURCE_EMAIL_ADDRESS] || secrets.SES_SOURCE_EMAIL_ADDRESS }}
          SES_REVIEW_TEAM_EMAIL_ADDRESS: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_SES_REVIEW_TEAM_EMAIL_ADDRESS] || secrets.SES_REVIEW_TEAM_EMAIL_ADDRESS }}
          ROUTE_53_HOSTED_ZONE_ID: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_ROUTE_53_HOSTED_ZONE_ID] }}
          ROUTE_53_DOMAIN_NAME: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_ROUTE_53_DOMAIN_NAME] }}
          CLOUDFRONT_CERTIFICATE_ARN: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_CLOUDFRONT_CERTIFICATE_ARN] }}
          CLOUDFRONT_DOMAIN_NAME: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_CLOUDFRONT_DOMAIN_NAME] }}
          CLOUDFRONT_STORYBOOK_DOMAIN_NAME: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_CLOUDFRONT_DOMAIN_NAME] }}
          OKTA_METADATA_URL: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_OKTA_METADATA_URL] || secrets.OKTA_METADATA_URL }}
          IAM_PATH: ${{ secrets.IAM_PATH }}
          FULL_IAM_PERMISSIONS_BOUNDARY_POLICY: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_FULL_IAM_PERMISSIONS_BOUNDARY_POLICY] || secrets.FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
          STAGE_PREFIX: ${{ secrets.STAGE_PREFIX }}
          DYNAMO_CONNECTION: ${{ secrets.DYNAMO_CONNECTION}}
      - name: lock this branch to prevent concurrent builds
        run: ./.github/github-lock.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}
      - name: Combine yarn.lock files to single file
        run: find services -maxdepth 3 -name yarn.lock | xargs cat yarn.lock > combined-yarn-lock.txt
      - name: cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            services/database/node_modules
            services/uploads/node_modules
            services/uploads-scan/node_modules
            services/app-api/node_modules
            services/stream-functions/node_modules
            services/ui-auth/node_modules
            services/ui/node_modules
            services/app-web/node_modules
            node_modules
            tests/nightwatch/node_modules
          key: ${{ runner.os }}-${{ hashFiles('combined-yarn-lock.txt') }}
      - name: set path
        run: |
          echo "PATH=$(pwd)/node_modules/.bin/:$PATH" >> $GITHUB_ENV
      - name: Unit Tests
        run: ./dev test --unit --run-db
      - name: publish code coverage
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: 364fbdd9d65e41f3ed5f70b6a295f5f76f7288a3930e738b010cad0c218df37c
        with:
          debug: true
          coverageLocations: |
            ${{github.workspace}}/services/app-api/coverage/lcov.info:lcov
            ${{github.workspace}}/services/app-web/coverage/lcov.info:lcov
      - name: set dev env vars
        run: ./.github/build_vars.sh set_values
        env:
          CLOUDFRONT_CERTIFICATE_ARN: ${{ secrets.DEV_CLOUDFRONT_CERTIFICATE_ARN }}
          CLOUDFRONT_DOMAIN_NAME: ${{ secrets.DEV_CLOUDFRONT_DOMAIN_NAME }}
          CLOUDFRONT_STORYBOOK_DOMAIN_NAME: ${{ secrets.DEV_CLOUDFRONT_STORYBOOK_DOMAIN_NAME }}
          REACT_APP_AUTH_MODE: IDM
      - name: deploy to dev
        run: |
          # When deploying multiple copies of this quickstart to the same AWS Account (not ideal), a prefix helps prevent stepping on each other.
          # This can optionally be set as an GitHub Actions Secret
          ./deploy.sh $STAGE_PREFIX$branch_name

      - name: Cypress on dev
        id: cypressdev
        uses: cypress-io/github-action@v2
        with:
          config: baseUrl=https://mc-review-dev.onemac.cms.gov
          spec: tests/cypress/integration/promoteWorkflow/promote.spec.ts
      - name: Upload cypress video
        uses: actions/upload-artifact@v2.2.4
        if: failure() && steps.cypressdev.outcome == 'failure'
        with:
          name: cypress-videos
          path: tests/cypress/videos

      - name: set val env vars
        run: ./.github/build_vars.sh set_values
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.VAL_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.VAL_AWS_SECRET_ACCESS_KEY }}
          CLOUDFRONT_CERTIFICATE_ARN: ${{ secrets.VAL_CLOUDFRONT_CERTIFICATE_ARN }}
          CLOUDFRONT_DOMAIN_NAME: ${{ secrets.VAL_CLOUDFRONT_DOMAIN_NAME }}
          CLOUDFRONT_STORYBOOK_DOMAIN_NAME: ${{ secrets.VAL_CLOUDFRONT_STORYBOOK_DOMAIN_NAME }}
          OKTA_METADATA_URL: ${{ secrets.VAL_OKTA_METADATA_URL }}
          FULL_IAM_PERMISSIONS_BOUNDARY_POLICY: ${{ secrets.VAL_FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
          REACT_APP_AUTH_MODE: IDM
      - name: Deploy to val
        run: ./deploy.sh val

      - name: Cypress on val
        id: cypressval
        uses: cypress-io/github-action@v2
        with:
          config: baseUrl=https://mc-review-val.onemac.cms.gov
          spec: tests/cypress/integration/promoteWorkflow/promote.spec.ts
      - name: Upload cypress video
        uses: actions/upload-artifact@v2.2.4
        if: failure() && steps.cypressval.outcome == 'failure'
        with:
          name: cypress-videos
          path: tests/cypress/videos

      - name: set prod env vars
        run: ./.github/build_vars.sh set_values
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          CLOUDFRONT_CERTIFICATE_ARN: ${{ secrets.PROD_CLOUDFRONT_CERTIFICATE_ARN }}
          CLOUDFRONT_DOMAIN_NAME: ${{ secrets.PROD_CLOUDFRONT_DOMAIN_NAME }}
          CLOUDFRONT_STORYBOOK_DOMAIN_NAME: ${{ secrets.PROD_CLOUDFRONT_STORYBOOK_DOMAIN_NAME }}
          OKTA_METADATA_URL: ${{ secrets.PROD_OKTA_METADATA_URL }}
          FULL_IAM_PERMISSIONS_BOUNDARY_POLICY: ${{ secrets.PROD_FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
          REACT_APP_AUTH_MODE: IDM
      - name: Deploy to prod
        run: ./deploy.sh prod

      - name: Cypress on prod
        id: cypressprod
        uses: cypress-io/github-action@v2
        with:
          config: baseUrl=https://mc-review.onemac.cms.gov
          spec: tests/cypress/integration/promoteWorkflow/promote.spec.ts
      - name: Upload cypress video
        uses: actions/upload-artifact@v2.2.4
        if: failure() && steps.cypressprod.outcome == 'failure'
        with:
          name: cypress-videos
          path: tests/cypress/videos

      - name: Alert Slack On Failure
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Deploy Alerts
          SLACK_ICON_EMOJI: ':bell:'
          SLACK_COLOR: ${{job.status}}
          SLACK_FOOTER: ''
          MSG_MINIMAL: actions url,commit
