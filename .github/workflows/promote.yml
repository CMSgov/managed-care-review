name: Promote

on:
  push:
    branches:
      - 'main'

jobs:
  build-prisma-client-lambda-layer:
    name: build - postgres prisma layer
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - uses: actions/setup-node@v2.4.0
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}

      - name: Install packages
        working-directory: services/app-api
        run: PRISMA_CLI_BINARY_TARGETS=rhel-openssl-1.0.x yarn install --frozen-lockfile

      # Generate Prisma Client and binary that can run in a lambda environment
      - name: Prepare prisma client
        working-directory: services/app-api
        run: PRISMA_CLI_BINARY_TARGETS=rhel-openssl-1.0.x yarn prisma generate

      - name: Prepare "@prisma/client" lambda layer
        working-directory: services/app-api
        run: ./scripts/prepare-prisma-layer.sh

      - uses: actions/upload-artifact@v2
        with:
          name: lambda-layers-prisma-client
          path: ./services/app-api/lambda-layers-prisma-client

  promote-dev:
    needs: [build-prisma-client-lambda-layer]
    uses: CMSgov/managed-care-review/.github/workflows/deploy-to-env.yml@$f79262ad9537a861aa7fa5dd73b3c1fa4cdc1873
    with:
      stage_name: main
      env_name: dev
    secrets:
      aws_access_key_id: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_ACCESS_KEY_ID] || secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_SECRET_ACCESS_KEY] || secrets.AWS_SECRET_ACCESS_KEY }}
      aws_default_region: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_DEFAULT_REGION] || secrets.AWS_DEFAULT_REGION }}
      infrastructure_type: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_INFRASTRUCTURE_TYPE] || secrets.INFRASTRUCTURE_TYPE || 'development' }}
      ses_source_email_address: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_SES_SOURCE_EMAIL_ADDRESS] || secrets.SES_SOURCE_EMAIL_ADDRESS }}
      ses_review_team_email_address: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_SES_REVIEW_TEAM_EMAIL_ADDRESS] || secrets.SES_REVIEW_TEAM_EMAIL_ADDRESS }}
      route_53_hosted_zone_id: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_ROUTE_53_HOSTED_ZONE_ID] }}
      route_53_domain_name: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_ROUTE_53_DOMAIN_NAME] }}
      okta_metadata_url: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_OKTA_METADATA_URL] || secrets.OKTA_METADATA_URL }}
      iam_path: ${{ secrets.IAM_PATH }}
      full_iam_permissions_boundary_policy: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_FULL_IAM_PERMISSIONS_BOUNDARY_POLICY] || secrets.FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
      stage_prefix: ${{ secrets.STAGE_PREFIX }}
      dynamo_connection: ${{ secrets.DYNAMO_CONNECTION}}
      cloudfront_certificate_arn: ${{ secrets.DEV_CLOUDFRONT_CERTIFICATE_ARN }}
      cloudfront_domain_name: ${{ secrets.DEV_CLOUDFRONT_DOMAIN_NAME }}
      cloudfront_storybook_domain_name: ${{ secrets.DEV_CLOUDFRONT_STORYBOOK_DOMAIN_NAME }}
      react_app_auth_mode: IDM

  dev-cypress:
    name: dev - cypress
    needs: [promote-dev]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Cypress on dev
        id: cypressdev
        uses: cypress-io/github-action@v2
        with:
          config: baseUrl=https://mc-review-dev.onemac.cms.gov
          spec: tests/cypress/integration/promoteWorkflow/promote.spec.ts

      - name: Upload cypress video
        uses: actions/upload-artifact@v2.2.4
        if: failure() && steps.cypressdev.outcome == 'failure'
        with:
          name: cypress-videos
          path: tests/cypress/videos

  promote-val:
    needs: [promote-dev]
    uses: CMSgov/managed-care-review/.github/workflows/deploy-to-env.yml@f79262ad9537a861aa7fa5dd73b3c1fa4cdc1873
    with:
      stage_name: main
      env_name: val
    secrets:
      aws_access_key_id: ${{ secrets.VAL_AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.VAL_AWS_SECRET_ACCESS_KEY }}
      cloudfront_certificate_arn: ${{ secrets.VAL_CLOUDFRONT_CERTIFICATE_ARN }}
      cloudfront_domain_name: ${{ secrets.VAL_CLOUDFRONT_DOMAIN_NAME }}
      cloudfront_storybook_domain_name: ${{ secrets.VAL_CLOUDFRONT_STORYBOOK_DOMAIN_NAME }}
      okta_metadata_url: ${{ secrets.VAL_OKTA_METADATA_URL }}
      full_iam_permissions_boundary_policy: ${{ secrets.VAL_FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
      react_app_auth_mode: IDM
      aws_default_region: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_DEFAULT_REGION] || secrets.AWS_DEFAULT_REGION }}
      infrastructure_type: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_INFRASTRUCTURE_TYPE] || secrets.INFRASTRUCTURE_TYPE || 'development' }}
      ses_source_email_address: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_SES_SOURCE_EMAIL_ADDRESS] || secrets.SES_SOURCE_EMAIL_ADDRESS }}
      ses_review_team_email_address: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_SES_REVIEW_TEAM_EMAIL_ADDRESS] || secrets.SES_REVIEW_TEAM_EMAIL_ADDRESS }}
      route_53_hosted_zone_id: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_ROUTE_53_HOSTED_ZONE_ID] }}
      route_53_domain_name: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_ROUTE_53_DOMAIN_NAME] }}
      iam_path: ${{ secrets.IAM_PATH }}
      stage_prefix: ${{ secrets.STAGE_PREFIX }}
      dynamo_connection: ${{ secrets.DYNAMO_CONNECTION}}

  cypress-val:
    name: val - cypress
    needs: [promote-val]
    runs-on: ubuntu-latest
    steps:
      - name: Cypress on val
        id: cypressval
        uses: cypress-io/github-action@v2
        with:
          config: baseUrl=https://mc-review-val.onemac.cms.gov
          spec: tests/cypress/integration/promoteWorkflow/promote.spec.ts

      - name: Upload cypress video
        uses: actions/upload-artifact@v2.2.4
        if: failure() && steps.cypressval.outcome == 'failure'
        with:
          name: cypress-videos
          path: tests/cypress/videos

  promote-prod:
    uses: CMSgov/managed-care-review/.github/workflows/deploy-to-env.yml@$f79262ad9537a861aa7fa5dd73b3c1fa4cdc1873
    with:
      stage_name: main
      env_name: prod
    secrets:
      aws_access_key_id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
      cloudfront_certificate_arn: ${{ secrets.PROD_CLOUDFRONT_CERTIFICATE_ARN }}
      cloudfront_domain_name: ${{ secrets.PROD_CLOUDFRONT_DOMAIN_NAME }}
      cloudfront_storybook_domain_name: ${{ secrets.PROD_CLOUDFRONT_STORYBOOK_DOMAIN_NAME }}
      okta_metadata_url: ${{ secrets.PROD_OKTA_METADATA_URL }}
      full_iam_permissions_boundary_policy: ${{ secrets.PROD_FULL_IAM_PERMISSIONS_BOUNDARY_POLICY }}
      react_app_auth_mode: IDM
      aws_default_region: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_AWS_DEFAULT_REGION] || secrets.AWS_DEFAULT_REGION }}
      infrastructure_type: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_INFRASTRUCTURE_TYPE] || secrets.INFRASTRUCTURE_TYPE || 'development' }}
      ses_source_email_address: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_SES_SOURCE_EMAIL_ADDRESS] || secrets.SES_SOURCE_EMAIL_ADDRESS }}
      ses_review_team_email_address: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_SES_REVIEW_TEAM_EMAIL_ADDRESS] || secrets.SES_REVIEW_TEAM_EMAIL_ADDRESS }}
      route_53_hosted_zone_id: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_ROUTE_53_HOSTED_ZONE_ID] }}
      route_53_domain_name: ${{ secrets[env.BRANCH_SPECIFIC_VARNAME_ROUTE_53_DOMAIN_NAME] }}
      iam_path: ${{ secrets.IAM_PATH }}
      stage_prefix: ${{ secrets.STAGE_PREFIX }}
      dynamo_connection: ${{ secrets.DYNAMO_CONNECTION}}

  cypress-prod:
    name: prod - cypress
    needs: [promote-prod]
    runs-on: ubuntu-latest
    steps:
      - name: Cypress on prod
        id: cypressprod
        uses: cypress-io/github-action@v2
        with:
          config: baseUrl=https://mc-review.onemac.cms.gov
          spec: tests/cypress/integration/promoteWorkflow/promote.spec.ts

      - name: Upload cypress video
        uses: actions/upload-artifact@v2.2.4
        if: failure() && steps.cypressprod.outcome == 'failure'
        with:
          name: cypress-videos
          path: tests/cypress/videos

      - name: Alert Slack On Failure
        uses: rtCamp/action-slack-notify@v2
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Deploy Alerts
          SLACK_ICON_EMOJI: ':bell:'
          SLACK_COLOR: ${{job.status}}
          SLACK_FOOTER: ''
          MSG_MINIMAL: actions url,commit
