name: Promote to an environment

on:
  workflow_call:
    inputs:
      stage_name:
        required: true
        type: string
      changed_services:
        required: true
        type: string
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      aws_default_region:
        required: true
      iam_path:
        required: true
      full_iam_permissions_boundary_policy:
        required: true
      cloudfront_certificate_arn:
        required: false
      cloudfront_domain_name:
        required: false
      cloudfront_storybook_domain_name:
        required: false
      react_app_auth_mode:
        required: true
      ses_source_email_address:
        required: true
      ses_review_team_email_addresses:
        required: true
      route_53_hosted_zone_id:
        required: false
      route_53_domain_name:
        required: false
      okta_metadata_url:
        required: true

jobs:
  postgres:
    if: ${{ contains(inputs.changed_services, 'postgres') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check which services changed
        shell: bash
        run: |
          echo ${{contains(inputs.changed_services, 'postgres')}}

      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: deploy postgres
        id: deploy-postgres
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}
          IAM_PATH: ${{ secrets.iam_path }}
          FULL_IAM_PERMISSIONS_BOUNDARY_POLICY: ${{ secrets.full_iam_permissions_boundary_policy }}
        run: |
          pushd services/postgres && npx serverless deploy --stage ${{ inputs.stage_name }}

  ui:
    if: ${{ contains(inputs.changed_services, 'ui') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: deploy ui
        id: deploy-ui
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}
          IAM_PATH: ${{ secrets.iam_path }}
          ROUTE_53_HOSTED_ZONE_ID: ${{ secrets.route_53_hosted_zone_id }}
          ROUTE_53_DOMAIN_NAME: ${{ secrets.route_53_domain_name }}
          CLOUDFRONT_CERTIFICATE_ARN: ${{ secrets.cloudfront_certificate_arn }}
          CLOUDFRONT_DOMAIN_NAME: ${{ secrets.cloudfront_domain_name }}
        run: |
          pushd services/ui && npx serverless deploy --stage ${{ inputs.stage_name }}

  storybook:
    if: ${{ contains(inputs.changed_services, 'storybook') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: deploy storybook
        id: deploy-storybook
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}
          IAM_PATH: ${{ secrets.iam_path }}
          ROUTE_53_HOSTED_ZONE_ID: ${{ secrets.route_53_hosted_zone_id }}
          ROUTE_53_DOMAIN_NAME: ${{ secrets.route_53_domain_name }}
          CLOUDFRONT_CERTIFICATE_ARN: ${{ secrets.cloudfront_certificate_arn }}
          CLOUDFRONT_STORYBOOK_DOMAIN_NAME: ${{ secrets.cloudfront_storybook_domain_name }}

        run: |
          pushd services/storybook && npx serverless deploy --stage ${{ inputs.stage_name }}

  uploads:
    if: ${{ contains(inputs.changed_services, 'uploads') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: deploy uploads
        id: deploy-uploads
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}
          FULL_IAM_PERMISSIONS_BOUNDARY_POLICY: ${{ secrets.full_iam_permissions_boundary_policy }}
          IAM_PATH: ${{ secrets.iam_path }}
        run: |
          pushd services/uploads && npx serverless deploy --stage ${{ inputs.stage_name }}

  app-api:
    needs: [postgres, ui, uploads]
    if: ${{ contains(inputs.changed_services, 'app-api') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup env
        uses: ./.github/actions/setup_env

      - uses: actions/download-artifact@v2
        with:
          name: lambda-layers-prisma-client
          path: ./services/app-api/lambda-layers-prisma-client

      - name: Unzip prisma layer
        run: |
          tar -C ./services/app-api/lambda-layers-prisma-client -xf ./services/app-api/lambda-layers-prisma-client/nodejs.tar.gz
          rm -rf ./services/app-api/lambda-layers-prisma-client/nodejs.tar.gz

      - name: deploy app-api
        id: deploy-app-api
        env:
          NODE_OPTIONS: --max_old_space_size=4096
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}
          DATABASE_URL: AWS_SM
          REACT_APP_AUTH_MODE: ${{ secrets.react_app_auth_mode }}
          IAM_PATH: ${{ secrets.iam_path }}
          FULL_IAM_PERMISSIONS_BOUNDARY_POLICY: ${{ secrets.full_iam_permissions_boundary_policy }}
          EMAILER_MODE: SES
          SES_REVIEW_TEAM_EMAIL_ADDRESSES: ${{ secrets.ses_review_team_email_addresses }}
          SES_SOURCE_EMAIL_ADDRESS: ${{ secrets.ses_source_email_address }}

        run: |
          pushd services/app-api && npx serverless deploy --stage ${{ inputs.stage_name }}

  ui-auth:
    needs: [uploads, app-api, ui]
    if: ${{ contains(inputs.changed_services, 'ui-auth') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: deploy ui-auth
        id: deploy-ui-auth
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}
          IAM_PATH: ${{ secrets.iam_path }}
          FULL_IAM_PERMISSIONS_BOUNDARY_POLICY: ${{ secrets.full_iam_permissions_boundary_policy }}
          SES_SOURCE_EMAIL_ADDRESS: ${{ secrets.ses_source_email_address }}
          OKTA_METADATA_URL: ${{ secrets.okta_metadata_url }}

        run: |
          pushd services/ui-auth && npx serverless deploy --stage ${{ inputs.stage_name }}

  run-migrations:
    needs: [postgres, app-api]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: set branch_name
        run: |
          echo "branch_name=${{ inputs.stage_name }}" >> $GITHUB_ENV

      - name: run migrations
        id: run-migrations
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}
          REACT_APP_AUTH_MODE: ${{ secrets.react_app_auth_mode }}
          DATABASE_URL: AWS_SM
          IAM_PATH: ${{ secrets.iam_path }}
          FULL_IAM_PERMISSIONS_BOUNDARY_POLICY: ${{ secrets.full_iam_permissions_boundary_policy }}
        run: |
          pushd services/app-api && ./scripts/invoke-migrate-lambda.sh app-api-$branch_name-migrate

  app-web:
    needs: [ui-auth, app-api, ui, uploads, storybook]
    if: ${{ contains(inputs.changed_services, 'ui-auth') }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: deploy app-web
        id: deploy-app-web
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_DEFAULT_REGION: ${{ secrets.aws_default_region }}
          IAM_PATH: ${{ secrets.iam_path }}
          REACT_APP_AUTH_MODE: ${{ secrets.react_app_auth_mode }}

        run: |
          pushd services/app-web && npx serverless deploy --stage ${{ inputs.stage_name }}
