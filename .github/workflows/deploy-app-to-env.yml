name: Promote to an environment

on:
  workflow_call:
    inputs:
      stage_name:
        required: true
        type: string
      app_version:
        required: true
        type: string
      changed_services:
        required: true
        type: string
    secrets:
      aws_default_region:
        required: true
      oidc_iam_role_arn:
        required: true
      react_app_auth_mode:
        required: true
      nr_license_key:
        required: true

permissions:
  id-token: write

jobs:
  app-web:
    if: ${{ contains(inputs.changed_services, 'app-web') }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ secrets.aws_default_region }}
          role-to-assume: ${{ secrets.oidc_iam_role_arn }}

      - name: Generate Code
        run: lerna run generate

      - name: deploy app-web
        id: deploy-app-web
        env:
          NODE_OPTIONS: --max_old_space_size=6000
          REACT_APP_AUTH_MODE: ${{ secrets.react_app_auth_mode }}
        run: |
          pushd services/app-web && npx serverless deploy --stage ${{ inputs.stage_name }}

  app-api:
    if: ${{ contains(inputs.changed_services, 'app-api') || contains(inputs.changed_services, 'app-proto') }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ secrets.aws_default_region }}
          role-to-assume: ${{ secrets.oidc_iam_role_arn }}

      - name: Generate Code
        run: lerna run generate

      - name: Compile proto migration files
        run: lerna run build --scope=app-proto

      - uses: actions/download-artifact@v3
        with:
          name: lambda-layers-prisma-client-migration
          path: ./services/app-api/lambda-layers-prisma-client-migration

      - name: Unzip prisma migration layer
        run: |
          tar -C ./services/app-api/lambda-layers-prisma-client-migration -xf ./services/app-api/lambda-layers-prisma-client-migration/nodejs.tar.gz
          rm -rf ./services/app-api/lambda-layers-prisma-client-migration/nodejs.tar.gz

      - uses: actions/download-artifact@v3
        with:
          name: lambda-layers-prisma-client-engine
          path: ./services/app-api/lambda-layers-prisma-client-engine

      - name: Unzip prisma engine layer
        run: |
          tar -C ./services/app-api/lambda-layers-prisma-client-engine -xf ./services/app-api/lambda-layers-prisma-client-engine/nodejs.tar.gz
          rm -rf ./services/app-api/lambda-layers-prisma-client-engine/nodejs.tar.gz

      - name: deploy app-api
        id: deploy-app-api
        env:
          NODE_OPTIONS: --max_old_space_size=6000
          APP_VERSION: ${{ inputs.app_version }}
          DATABASE_URL: AWS_SM
          REACT_APP_AUTH_MODE: ${{ secrets.react_app_auth_mode }}
          EMAILER_MODE: SES
          NR_LICENSE_KEY: ${{ secrets.nr_license_key }}
        run: |
          pushd services/app-api && npx serverless deploy --stage ${{ inputs.stage_name }}

      - name: run migrations
        id: run-migrations
        env:
          STAGE_NAME: ${{ inputs.stage_name }}
        run: |
          pushd services/app-api && ./scripts/invoke-migrate-lambda.sh app-api-$STAGE_NAME-migrate
